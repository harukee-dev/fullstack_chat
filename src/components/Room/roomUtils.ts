import { useCallback, useEffect, useRef, useState } from 'react'

// –∫–∞—Å—Ç–æ–º–Ω—ã–π —Ö—É–∫ –¥–ª—è –æ–ø—Ä–µ–¥–µ–ª–µ–Ω–∏—è –≥—Ä–æ–º–∫–æ—Å—Ç–∏ –∏ –≤–æ–∑–≤—Ä–∞—â–µ–Ω–∏—è, –≥–æ–≤–æ—Ä–∏—Ç –ª–∏ —á–µ–ª–æ–≤–µ–∫, –∏–ª–∏ –Ω–µ—Ç
export const useAudioVolume = (
  stream: MediaStream | null, // –ø–æ–ª—É—á–∞–µ–º –ª–æ–∫–∞–ª—å–Ω—ã–π —Å—Ç—Ä–∏–º, –∏–∑ –∫–æ—Ç–æ—Ä–æ–≥–æ –±—É–¥–µ–º –¥–æ—Å—Ç–∞–≤–∞—Ç—å –∞—É–¥–∏–æ –¥–æ—Ä–æ–∂–∫—É
  threshold: number // –∏ –ø–æ–ª—É—á–∞–µ–º —á—É–≤—Å—Ç–≤–∏—Ç–µ–ª—å–Ω–æ—Å—Ç—å
) => {
  const [isSpeaking, setIsSpeaking] = useState<boolean>(false) // —Å–æ—Å—Ç–æ—è–Ω–∏–µ, –≥–æ–≤–æ—Ä–∏—Ç –ª–∏ —Å–µ–π—á–∞—Å —á–µ–ª–æ–≤–µ–∫ (–∫–æ—Ç–æ—Ä–æ–µ –º—ã –ø–æ—Å–ª–µ –±—É–¥–µ–º –≤–æ–∑–≤—Ä–∞—â–∞—Ç—å)
  const intervalRef = useRef<NodeJS.Timeout | null>(null) // —Ä–µ—Ñ –∏–Ω—Ç–µ—Ä–≤–∞–ª–∞ –¥–ª—è –ø—Ä–æ–≤–µ—Ä–∫–∏ (–∫–∞–∂–¥—ã–µ 30–º—Å –ø—Ä–æ–≤–µ—Ä—è–µ–º –Ω–∞ —Ç–æ, –≥–æ–≤–æ—Ä–∏—Ç –∏–ª–∏ –Ω–µ—Ç)
  const audioContextRef = useRef<AudioContext | null>(null) // —Ä–µ—Ñ –∞—É–¥–∏–æ –∫–æ–Ω—Ç–µ–∫—Å—Ç–∞ - –¥–≤–∏–∂–æ–∫ –¥–ª—è —Ä–∞–±–æ—Ç—ã —Å –∞—É–¥–∏–æ –≤ –±—Ä–∞—É–∑–µ—Ä–µ
  const analyserRef = useRef<AnalyserNode | null>(null) // —Ä–µ—Ñ –∞–Ω–∞–ª–∏–∑–∞—Ç–æ—Ä–∞ - –∏–Ω—Å—Ç—Ä—É–º–µ–Ω—Ç –¥–ª—è –∞–Ω–∞–ª–∏–∑–∞ –∞—É–¥–∏–æ –¥–∞–Ω–Ω—ã—Ö

  useEffect(() => {
    console.log(isSpeaking)
  }, [isSpeaking])

  // —ç—Ñ—Ñ–µ–∫—Ç - –∑–∞–ø—É—Å–∫–∞–µ—Ç—Å—è, –∫–æ–≥–¥–∞ –º–µ–Ω—è–µ—Ç—Å—è –ª–æ–∫–∞–ª—å–Ω—ã–π —Å—Ç—Ä–∏–º –∏–ª–∏ —á—É–≤—Å—Ç–≤–∏—Ç–µ–ª—å–Ω–æ—Å—Ç—å
  useEffect(() => {
    if (!stream) {
      // –µ—Å–ª–∏ –ª–æ–∫–∞–ª—å–Ω–æ–≥–æ —Å—Ç—Ä–∏–º–∞ –Ω–µ—Ç
      setIsSpeaking(false) // —Ç–æ —Å–æ—Ö—Ä–∞–Ω—è–µ–º, —á—Ç–æ —é–∑–µ—Ä –Ω–µ –≥–æ–≤–æ—Ä–∏—Ç
      return // –ø—É—Å—Ç–æ–π return—ã
    }

    const audioTracks = stream.getAudioTracks() // –ø–æ–ª—É—á–∞–µ–º –∞—É–¥–∏–æ —Ç—Ä–µ–∫ –∏–∑ –Ω–∞—à–µ–≥–æ –ª–æ–∫–∞–ª—å–Ω–æ–≥–æ —Å—Ç—Ä–∏–º–∞
    if (audioTracks.length === 0) {
      // –µ—Å–ª–∏ –ª–æ–∫–∞–ª—å–Ω–æ–≥–æ –∞—É–¥–∏–æ —Ç—Ä–µ–∫–∞ –Ω–µ—Ç
      setIsSpeaking(false) // —Å–æ—Ö—Ä–∞–Ω—è–µ–º, —á—Ç–æ —é–∑–µ—Ä –Ω–µ –≥–æ–≤–æ—Ä–∏—Ç
      return // –ø—É—Å—Ç–æ–π return
    }

    try {
      const audioContext = new AudioContext() // —Å–æ–∑–¥–∞–µ–º –∞—É–¥–∏–æ –∫–æ–Ω—Ç–µ–∫—Ç
      audioContextRef.current = audioContext // —Å–æ—Ö—Ä–∞–Ω—è–µ–º –µ–≥–æ –≤ —Ä–µ—Ñ–∫–µ

      const analyser = audioContext.createAnalyser() // —Å–æ–∑–¥–∞–µ–º –∞–Ω–∞–ª–∏–∑–∞—Ç–æ—Ä
      analyser.fftSize = 256 // –∑–∞–¥–∞–µ–º –µ–º—É —Ç–æ—á–Ω–æ—Å—Ç—å –∞–Ω–∞–ª–∏–∑–∞ (—á–µ–º –±–æ–ª—å—à–µ, —Ç–µ–º —Ç–æ—á–Ω–µ–µ, –Ω–æ –º–µ–¥–ª–µ–Ω–Ω–µ–µ)
      analyserRef.current = analyser // —Å–æ—Ö—Ä–∞–Ω—è–µ–º –∞–Ω–∞–ª–∏–∑–∞—Ç–æ—Ä –≤ —Ä–µ—Ñ–∫–µ

      const source = audioContext.createMediaStreamSource(stream) // –±–µ—Ä–µ–º –∞—É–¥–∏–æ –ø–æ—Ç–æ–∫ –∏–∑ –ª–æ–∫–∞–ª—å–Ω–æ–≥–æ —Å—Ç—Ä–∏–º–∞
      source.connect(analyser) // –ø–æ–¥–∫–ª—é—á–∞–µ–º –µ–≥–æ –∫ –∞–Ω–∞–ª–∏–∑–∞—Ç–æ—Ä—É

      const dataArray = new Uint8Array(analyser.frequencyBinCount) // —Å–æ–∑–¥–∞–µ–º –º–∞—Å—Å–∏–≤ –¥–ª—è –¥–∞–Ω–Ω—ã—Ö - –≤ –Ω–µ–≥–æ –∞–Ω–∞–ª–∏–∑–∞—Ç–æ—Ä –±—É–¥–µ—Ç –∑–∞–ø–∏—Å—ã–≤–∞—Ç—å –≥—Ä–æ–º–∫–æ—Å—Ç—å (0-255)

      // –∑–∞–ø—É—Å–∫–∞–µ–º –ø–µ—Ä–∏–æ–¥–∏—á–µ—Å–∫—É—é –ø—Ä–æ–≤–µ—Ä–∫—É
      intervalRef.current = setInterval(() => {
        if (!analyserRef.current) return // –µ—Å–ª–∏ –∞–Ω–∞–ª–∏–∑–∞—Ç–æ—Ä–∞ –Ω–µ—Ç - –ø—É—Å—Ç–æ–π return—ã

        analyserRef.current.getByteFrequencyData(dataArray) // –ø–æ–ª—É—á–∞–µ–º –¥–∞–Ω–Ω—ã–µ –æ –≥—Ä–æ–º–∫–æ—Å—Ç–∏

        // –∞–Ω–∞–ª–∏–∑–∏—Ä—É–µ–º —Å—Ä–µ–¥–Ω–∏–µ —á–∞—Å—Ç–æ—Ç—ã - –≤ –Ω–∏—Ö —Ä–µ—á—å
        let sum = 0
        for (let i = 1; i < 48; i++) {
          sum += dataArray[i] // —Å—É–º–º–∏—Ä—É–µ–º –≥—Ä–æ–º–∫–æ—Å—Ç—å –Ω–∞ –≤—Å–µ—Ö —á–∞—Å—Ç–æ—Ç–∞—Ö
        }

        const average = sum / 48 // –≤—ã—á–∏—Å–ª—è–µ–º —Å—Ä–µ–¥–Ω—é—é –≥—Ä–æ–º–∫–æ—Å—Ç—å –Ω–∞ —Å—Ä–µ–¥–Ω–∏—Ö —á–∞—Å—Ç–æ—Ç–∞—Ö
        const db = average > 0 ? 20 * Math.log10(average / 255) : -100 // –ø—Ä–µ–æ–±—Ä–∞–∑—É–µ–º –≤ –¥–µ—Ü–∏–±–µ–ª—ã

        // –æ–ø—Ä–µ–¥–µ–ª—è–µ–º —Ä–µ—á—å
        setIsSpeaking(db > threshold) // –µ—Å–ª–∏ –≥—Ä–æ–º–∫–æ—Å—Ç—å –±–æ–ª—å—à–µ —á–µ–º —á—É–≤—Å—Ç–≤–∏—Ç–µ–ª—å–Ω–æ—Å—Ç—å - —é–∑–µ—Ä –≥–æ–≤–æ—Ä–∏—Ç, –∏–Ω–∞—á–µ - –º–æ–ª—á–∏—Ç
      }, 30)
    } catch (error) {
      console.error('Audio analysis error:', error) // –æ–±—Ä–∞–±–æ—Ç–∫–∞ –æ—à–∏–±–æ–∫
    }

    // cleanup –ø—Ä–∏ —É–Ω–∏—á—Ç–æ–∂–µ–Ω–∏–∏ –∫–æ–º–ø–æ–Ω–µ–Ω—Ç–∞, –∏–∑–º–µ–Ω–µ–Ω–∏–∏ —á—É–≤—Å—Ç–≤–∏—Ç–µ–ª—å–Ω–æ—Å—Ç–∏ –∏–ª–∏ –ª–æ–∫–∞–ª—å–Ω–æ–≥–æ —Å—Ç—Ä–∏–º–∞
    return () => {
      if (intervalRef.current) clearInterval(intervalRef.current) // –µ—Å–ª–∏ —Ä–∞–±–æ—Ç–∞–µ—Ç –∏–Ω—Ç–µ—Ä–≤–∞–ª - –æ—á–∏—â–∞–µ–º –µ–≥–æ
      if (audioContextRef.current)
        // –µ—Å–ª–∏ –µ—Å—Ç—å –∞—É–¥–∏–æ –∫–æ–Ω—Ç–µ–∫—Å—Ç (–¥–≤–∏–∂–æ–∫ –¥–ª—è —Ä–∞–±–æ—Ç—ã —Å–æ –∑–≤—É–∫–æ–º) - –∑–∞–∫—Ä—ã–≤–∞–µ–º –µ–≥–æ
        audioContextRef.current.close().catch(() => {})
    }
  }, [stream, threshold])

  return { isSpeaking } // –≤–æ–∑–≤—Ä–∞—â–∞–µ–º, –≥–æ–≤–æ—Ä–∏—Ç –ª–∏ —é–∑–µ—Ä, –∏–ª–∏ –Ω–µ—Ç
}

interface AudioControlProps {
  isSpeaking: boolean
  isMicroMuted: boolean
  sendTransport: any
  producersRef: any
  isConnected: boolean
  localStream: MediaStream | null
  createProducer: (
    transport: any,
    stream: MediaStream,
    kind: string
  ) => Promise<any>
}

export const useAudioControl = ({
  isSpeaking,
  isMicroMuted,
  sendTransport,
  producersRef,
  isConnected,
  localStream,
  createProducer,
}: AudioControlProps) => {
  const [isTransmitting, setIsTransmitting] = useState(false)
  const audioContextRef = useRef<AudioContext | null>(null)
  const gainNodeRef = useRef<GainNode | null>(null)
  const processedStreamRef = useRef<MediaStream | null>(null)
  const isInitializedRef = useRef(false)

  // –°–æ–∑–¥–∞–µ–º –æ–±—Ä–∞–±–æ—Ç–∞–Ω–Ω—ã–π —Å—Ç—Ä–∏–º —Å GainNode
  const createProcessedStream = useCallback(
    async (originalStream: MediaStream): Promise<MediaStream> => {
      if (!originalStream) throw new Error('No original stream provided')

      // –°–æ–∑–¥–∞–µ–º AudioContext
      const audioContext = new AudioContext()
      audioContextRef.current = audioContext

      // –°–æ–∑–¥–∞–µ–º GainNode –¥–ª—è —É–ø—Ä–∞–≤–ª–µ–Ω–∏—è –≥—Ä–æ–º–∫–æ—Å—Ç—å—é
      const gainNode = audioContext.createGain()
      gainNodeRef.current = gainNode

      // –ù–∞—á–∞–ª—å–Ω–∞—è –≥—Ä–æ–º–∫–æ—Å—Ç—å - 0 (–º–æ–ª—á–∏–º)
      gainNode.gain.value = 0

      // –°–æ–∑–¥–∞–µ–º –∏—Å—Ç–æ—á–Ω–∏–∫ –∏–∑ –æ—Ä–∏–≥–∏–Ω–∞–ª—å–Ω–æ–≥–æ —Å—Ç—Ä–∏–º–∞
      const source = audioContext.createMediaStreamSource(originalStream)

      // –°–æ–∑–¥–∞–µ–º destination –¥–ª—è –≤—ã–≤–æ–¥–∞
      const destination = audioContext.createMediaStreamDestination()

      // –ü–æ–¥–∫–ª—é—á–∞–µ–º —Ü–µ–ø–æ—á–∫—É: source -> gainNode -> destination
      source.connect(gainNode)
      gainNode.connect(destination)

      return destination.stream
    },
    []
  )

  // –£–ø—Ä–∞–≤–ª–µ–Ω–∏–µ –≥—Ä–æ–º–∫–æ—Å—Ç—å—é
  const setAudioVolume = useCallback((volume: number) => {
    if (gainNodeRef.current) {
      gainNodeRef.current.gain.value = volume
      console.log(`üîä Audio volume set to: ${Math.round(volume * 100)}%`)
    }
  }, [])

  // –û—Å–Ω–æ–≤–Ω–∞—è –ª–æ–≥–∏–∫–∞
  useEffect(() => {
    const shouldTransmit = !isMicroMuted && isSpeaking
    const targetVolume = shouldTransmit ? 1.0 : 0.0

    // –ú–µ–Ω—è–µ–º –≥—Ä–æ–º–∫–æ—Å—Ç—å, –µ—Å–ª–∏ GainNode —É–∂–µ –∏–Ω–∏—Ü–∏–∞–ª–∏–∑–∏—Ä–æ–≤–∞–Ω
    if (isInitializedRef.current && gainNodeRef.current) {
      setAudioVolume(targetVolume)
      setIsTransmitting(shouldTransmit)
      return
    }

    // –ò–Ω–∏—Ü–∏–∞–ª–∏–∑–∞—Ü–∏—è: —Å–æ–∑–¥–∞–µ–º –ø—Ä–æ–¥—é—Å–µ—Ä —Å –æ–±—Ä–∞–±–æ—Ç–∞–Ω–Ω—ã–º —Å—Ç—Ä–∏–º–æ–º
    const initializeAudioProducer = async () => {
      if (
        !sendTransport ||
        !localStream ||
        !isConnected ||
        isInitializedRef.current
      )
        return

      try {
        console.log('üé§ Initializing audio producer with GainNode...')

        // –°–æ–∑–¥–∞–µ–º –æ–±—Ä–∞–±–æ—Ç–∞–Ω–Ω—ã–π —Å—Ç—Ä–∏–º —Å GainNode
        const processedStream = await createProcessedStream(localStream)
        processedStreamRef.current = processedStream

        // –°–æ–∑–¥–∞–µ–º –ø—Ä–æ–¥—é—Å–µ—Ä —Å –æ–±—Ä–∞–±–æ—Ç–∞–Ω–Ω—ã–º —Å—Ç—Ä–∏–º–æ–º
        await createProducer(sendTransport, processedStream, 'audio')

        // –£—Å—Ç–∞–Ω–∞–≤–ª–∏–≤–∞–µ–º –Ω–∞—á–∞–ª—å–Ω—É—é –≥—Ä–æ–º–∫–æ—Å—Ç—å
        setAudioVolume(targetVolume)
        setIsTransmitting(shouldTransmit)
        isInitializedRef.current = true

        console.log('‚úÖ Audio producer with GainNode initialized successfully')
      } catch (error) {
        console.error(
          '‚ùå Failed to initialize audio producer with GainNode:',
          error
        )
      }
    }

    initializeAudioProducer()
  }, [
    isSpeaking,
    isMicroMuted,
    sendTransport,
    localStream,
    isConnected,
    createProcessedStream,
    setAudioVolume,
    createProducer,
  ])

  // Cleanup
  useEffect(() => {
    return () => {
      if (audioContextRef.current) {
        audioContextRef.current.close().catch(console.error)
      }
    }
  }, [])

  return { isTransmitting, setAudioVolume }
}
