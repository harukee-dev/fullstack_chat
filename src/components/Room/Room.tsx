// –ò–º–ø–æ—Ä—Ç—ã
import { useEffect, useState, useCallback, useRef } from 'react'
import { useNavigate, useParams } from 'react-router-dom'
import { useMediaSoup } from '../../hooks/useMediaSoup'
import { useSocket } from '../../SocketContext'
import cl from './room.module.css'
import leaveSound from './sounds/leave-sound.mp3'
import joinSound from './sounds/join-sound.mp3'
import mutedIcon from './images/muted-microphone-icon.png'
import { AnimatePresence, motion } from 'framer-motion'
import { useAudioVolume, useAudioControl } from './roomUtils'
// –ò–Ω—Ç–µ—Ä—Ñ–µ–π—Å –¥–ª—è –¥–∞–Ω–Ω—ã—Ö –æ –ø–æ—Ç—Ä–µ–±–∏—Ç–µ–ª–µ –º–µ–¥–∏–∞
interface ConsumerData {
  consumer: any // –æ–±—ä–µ–∫—Ç Consumer - –ø–æ–ª—É—á–∞–µ—Ç –º–µ–¥–∏–∞ –æ—Ç –¥—Ä—É–≥–∏—Ö –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª–µ–π
  kind: string // —Ç–∏–ø –º–µ–¥–∏–∞ - 'audio'/'video'
  type: ''
  userId: string // ID –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è
  username?: string // –Ω–∏–∫ –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è –æ—Ç –∫–æ—Ç–æ—Ä–æ–≥–æ –º—ã –ø–æ–ª—É—á–∞–µ–º –º–µ–¥–∏–∞
  avatar?: string // –∞–≤–∞—Ç–∞—Ä–∫–∞ –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è –æ—Ç –∫–æ—Ç–æ—Ä–æ–≥–æ –º—ã –ø–æ–ª—É—á–∞–µ–º –º–µ–¥–∏–∞
}

// –ò–Ω—Ç–µ—Ä—Ñ–µ–π—Å –¥–ª—è –ø—Ä–æ–∏–∑–≤–æ–¥–∏—Ç–µ–ª–µ–π –º–µ–¥–∏–∞ - —Ç–æ –µ—Å—Ç—å –¥–ª—è –æ—Ç–ø—Ä–∞–≤–∫–∏ –º–µ–¥–∏–∞ —Å–µ—Ä–≤–µ—Ä—É
interface Producers {
  [key: string]: any
  audio?: any // –µ—Å—Ç—å –ª–∏ –∞—É–¥–∏–æ –≤ –Ω–∞—à–µ–º –º–µ–¥–∏–∞
  video?: any // –µ—Å—Ç—å –ª–∏ –≤–∏–¥–µ–æ –≤ –Ω–∞—à–µ–º –º–µ–¥–∏–∞
}

// –ò–Ω—Ç–µ—Ä—Ñ–µ–π—Å –¥–ª—è —Ö—Ä–∞–Ω–µ–Ω–∏—è –≤—Å–µ—Ö –ø–æ—Ç—Ä–µ–±–∏—Ç–µ–ª–µ–π
interface Consumers {
  [producerId: string]: ConsumerData // –∫–ª—é—á - –∞–π–¥–∏ –ø—Ä–æ–¥—é—Å–µ—Ä–∞, –∑–Ω–∞—á–µ–Ω–∏–µ - –¥–∞–Ω–Ω—ã–µ –æ –∫–æ–Ω—Å—é–º–µ—Ä–µ
}

export const Room = () => {
  const currentUserId = localStorage.getItem('user-id') // —Ç–µ–∫—É—â–∏–π –∞–π–¥–∏ –ª–æ–∫–∞–ª—å–Ω–æ–≥–æ –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è
  const { id: roomId } = useParams() // –∞–π–¥–∏ –∫–æ–º–Ω–∞—Ç—ã –∑–≤–æ–Ω–∫–∞
  const [isMicroMuted, setIsMicroMuted] = useState<boolean>(false) // –∑–∞–º—É—á–µ–Ω –ª–∏ –º–∏–∫—Ä–æ—Ñ–æ–Ω
  const [isCameraOn, setIsCameraOn] = useState<boolean>(false) // –≤–∫–ª—é—á–µ–Ω–∞ –ª–∏ –∫–∞–º–µ—Ä–∞
  const [localStream, setLocalStream] = useState<MediaStream | null>(null) // –ª–æ–∫–∞–ª—å–Ω—ã–π —Å—Ç—Ä–∏–º (–∑–≤—É–∫ –∏/–∏–ª–∏ –≤–∏–¥–µ–æ)
  const [sendTransport, setSendTransport] = useState<any>(null) // —Ç—Ä–∞–Ω—Å–ø–æ—Ä—Ç –¥–ª—è –æ—Ç–ø—Ä–∞–≤–∫–∏ –º–µ–¥–∏–∞
  const [producers, setProducers] = useState<Producers>({}) // –æ–±—ä–µ–∫—Ç —Å –Ω–∞—à–∏–º–∏ –ø—Ä–æ–¥—é—Å–µ—Ä–∞–º–∏
  const [consumers, setConsumers] = useState<Consumers>({}) // –æ–±—ä–µ–∫—Ç —Å –∫–æ–Ω—Å—é–º–µ—Ä–∞–º–∏ –¥—Ä—É–≥–∏—Ö –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª–µ–π
  const [isConnected, setIsConnected] = useState<boolean>(false) // —Å—Ç–∞—Ç—É—Å –ø–æ–¥–∫–ª—é—á–µ–Ω–∏—è –∫ –∑–≤–æ–Ω–∫—É
  const [reconnectAttempts, setReconnectAttempts] = useState<number>(0) // –∫–æ–ª–≤–æ –ø–æ–ø—ã—Ç–æ–∫ –ø–µ—Ä–µ–ø–æ–¥–∫–ª—é—á–µ–Ω–∏—è –∫ –∑–≤–æ–Ω–∫—É
  const navigate = useNavigate() // —Ñ—É–Ω–∫—Ü–∏—è –Ω–∞–≤–∏–≥–∞—Ü–∏–∏ –Ω–∞ –Ω—É–∂–Ω—ã–π –∞–¥—Ä–µ—Å
  const [isVideoCall, setIsVideoCall] = useState<boolean>(false)

  const joinSoundRef = useRef<HTMLAudioElement | null>(null)
  const leaveSoundRef = useRef<HTMLAudioElement | null>(null)

  const [mutedUsers, setMutedUsers] = useState<Set<string>>(new Set())

  useEffect(() => {
    joinSoundRef.current = new Audio(joinSound)
    leaveSoundRef.current = new Audio(leaveSound)

    joinSoundRef.current.load()
    leaveSoundRef.current.load()
  }, [])

  const { socket } = useSocket() // –ø–æ–ª—É—á–∞–µ–º —Å–æ–∫–µ—Ç –∏–∑ –∫–æ–Ω—Ç–µ–∫—Å—Ç–∞
  const {
    device, // –æ–±—ä–µ–∫—Ç –Ω–∞—à–µ–≥–æ –¥–µ–≤–∞–π—Å–∞ (–Ω–æ—É—Ç–∞, —Ç–µ–ª–µ—Ñ–æ–Ω–∞, –∫–æ–º–ø–∞ –∏ —Ç–¥)
    isDeviceInitialized, // –∏–Ω–∏—Ü–∏–∞–ª–∏–∑–∏—Ä–æ–≤–∞–Ω–æ –ª–∏ —É—Å—Ç—Ä–æ–π—Å—Ç–≤–æ
    isLoading, // –∏–¥–µ—Ç –ª–∏ –∑–∞–≥—Ä—É–∑–∫–∞
    error, // –æ—à–∏–±–∫–∏ –µ—Å–ª–∏ –µ—Å—Ç—å
    createTransports, // —Ñ—É–Ω–∫—Ü–∏—è —Å–æ–∑–¥–∞–Ω–∏—è —Ç—Ä–∞–Ω—Å–ø–æ—Ä—Ç–æ–≤
    createConsumer, // —Ñ—É–Ω–∫—Ü–∏—è —Å–æ–∑–¥–∞–Ω–∏—è –∫–æ–Ω—Å—é–º–µ—Ä–∞
    closeTransports, // —Ñ—É–Ω–∫—Ü–∏—è –∑–∞–∫—Ä—ã—Ç–∏—è —Ç—Ä–∞–Ω—Å–ø–æ—Ä—Ç–æ–≤
    fullRetry, // —Ñ—É–Ω–∫—Ü–∏—è –ø–æ–ª–Ω–æ–≥–æ –ø–µ—Ä–µ–ø–æ–¥–∫–ª—é—á–µ–Ω–∏—è
    reconnectAttempts: mediaSoupAttempts,
  } = useMediaSoup(roomId || '', isMicroMuted, isCameraOn)

  const producersRef = useRef<Producers>({}) // —Å—Å—ã–ª–∫–∞ –Ω–∞ –æ–±—ä–µ–∫—Ç –ø—Ä–æ–¥—é—Å–µ—Ä–æ–≤ (–¥–ª—è –±—ã—Å—Ç—Ä–æ–≥–æ –¥–æ—Å—Ç—É–ø–∞)
  const isInitializedRef = useRef(false) // —Ñ–ª–∞–≥ –∏–Ω–∏—Ü–∏–∞–ª–∏–∑–∞—Ü–∏–∏ (–∏–∑–±–µ–≥–∞–µ–º –ø–æ–≤—Ç–æ—Ä–Ω–æ–π –∏–Ω–∏—Ü–∏–∞–ª–∏–∑–∞—Ü–∏–∏)
  const reconnectTimeoutRef = useRef<NodeJS.Timeout | null>(null) // —Å—Å—ã–ª–∫–∞ –Ω–∞ —Ç–∞–π–º–µ—Ä –ø–µ—Ä–µ–ø–æ–¥–∫–ª—é—á–µ–Ω–∏—è
  const userIdRef = useRef<string>(socket?.id || '') // ID —é–∑–µ—Ä–∞ (socket.id)
  const recvTransportRef = useRef<any>(null) // —Ç—Ä–∞–Ω—Å–ø–æ—Ä—Ç –¥–ª—è –ø–æ–ª—É—á–µ–Ω–∏—è –º–µ–¥–∏–∞ (receive transport)

  useEffect(() => {
    userIdRef.current = socket?.id || ''
  }, [socket])

  useEffect(() => {
    socket?.emit('get-muted-users', roomId)
  }, [socket])

  useEffect(() => {
    if (isMicroMuted) {
      socket?.emit('user-muted', { userId: currentUserId, roomId: roomId })
    } else {
      socket?.emit('user-unmuted', { userId: currentUserId, roomId: roomId })
    }
  }, [isMicroMuted, socket, currentUserId, roomId])

  useEffect(() => {
    socket?.on('user-muted', (mutedUsersArray: string[]) => {
      setMutedUsers(new Set(mutedUsersArray))
    })
    socket?.on('user-unmuted', (mutedUsersArray: string[]) => {
      setMutedUsers(new Set(mutedUsersArray))
    })
    socket?.on('get-muted-users', (mutedUsersArray: string[]) => {
      setMutedUsers(new Set(mutedUsersArray))
    })
  }, [socket])

  // –§—É–Ω–∫—Ü–∏—è –ø–æ–ª—É—á–µ–Ω–∏—è –º–µ–¥–∏–∞ –ø–æ—Ç–æ–∫–∞
  const getMediaStream = useCallback(
    async (isCameraOn: boolean) => {
      // –ø—Ä–∏–Ω–∏–º–∞–µ–º —Å–æ—Å—Ç–æ—è–Ω–∏–µ, –≤–∫–ª—é—á–µ–Ω–∞ –ª–∏ –∫–∞–º–µ—Ä–∞
      try {
        const stream = await navigator.mediaDevices.getUserMedia({
          // –ø–æ–ª—É—á–∞–µ–º –ª–æ–∫–∞–ª—å–Ω—ã–π —Å—Ç—Ä–∏–º –∏–∑ –Ω–∞—à–µ–≥–æ –¥–µ–≤–∞–π—Å–∞
          // –µ—Å–ª–∏ –º–∏–∫—Ä–æ—Ñ–æ–Ω –Ω–µ –∑–∞–º—É—á–µ–Ω
          audio: {
            // —Ç–æ –±—É–¥–µ—Ç –∞—É–¥–∏–æ —Å —Ç–∞–∫–∏–º–∏ –Ω–∞—Å—Ç—Ä–æ–π–∫–∞–º–∏
            echoCancellation: true, // —ç—Ö–æ–ø–æ–¥–∞–≤–ª–µ–Ω–∏–µ
            noiseSuppression: true, // —à—É–º–æ–ø–æ–¥–∞–≤–ª–µ–Ω–∏–µ
            autoGainControl: true, // –∞–≤—Ç–æ—É—Å–∏–ª–µ–Ω–∏–µ –≥—Ä–æ–º–∫–æ—Å—Ç–∏
          }, // –µ—Å–ª–∏ –º–∏–∫—Ä–æ—Ñ–æ–Ω –∑–∞–º—É—á–µ–Ω, —Ç–æ –Ω–µ –æ—Ç–ø—Ä–∞–≤–ª—è–µ–º –∑–≤—É–∫
          video: isCameraOn // –µ—Å–ª–∏ –∫–∞–º–µ—Ä–∞ –≤–∫–ª—é—á–µ–Ω–∞
            ? {
                // –æ—Ç–ø—Ä–∞–≤–ª—è–µ–º –Ω–∞—à–µ –≤–∏–¥–µ–æ —Å —Ç–∞–∫–∏–º–∏ –Ω–∞—Å—Ç—Ä–æ–π–∫–∞–º–∏
                width: 1280, // HD
                height: 720, // HD
                frameRate: 30, // 30FPS
                // –ø–æ–∑–∂–µ —Å—é–¥–∞ –¥–æ–±–∞–≤–∏–º –≤–æ–∑–º–æ–∂–Ω–æ—Å—Ç—å –Ω–∞—Å—Ç—Ä–∞–∏–≤–∞—Ç—å —Å–∞–º–æ–º—É –∫–∞—á–µ—Å—Ç–≤–æ –≤–∏–¥–µ–æ, –µ—Å–ª–∏ –µ—Å—Ç—å –ø–æ–¥–ø–∏—Å–∫–∞
              }
            : false, // –µ—Å–ª–∏ –∫–∞–º–µ—Ä–∞ –≤—ã–∫–ª—é—á–µ–Ω–∞, –Ω–µ –æ—Ç–ø—Ä–∞–≤–ª—è–µ–º –µ–µ
        })
        return stream // —Ñ—É–Ω–∫—Ü–∏—è –≤–æ–∑–≤—Ä–∞—â–∞–µ—Ç –Ω–∞—à —Å—Ç—Ä–∏–º
      } catch (error) {
        // –æ–±—Ä–∞–±–æ—Ç–∫–∞ –æ—à–∏–±–æ–∫ –ø—Ä–∏ –ø–æ–ª—É—á–µ–Ω–∏–∏ –ª–æ–∫–∞–ª—å–Ω–æ–≥–æ —Å—Ç—Ä–∏–º–∞
        console.error('–û—à–∏–±–∫–∞ –ø—Ä–∏ –ø–æ–ª—É—á–µ–Ω–∏–∏ –º–µ–¥–∏–∞–¥–∞–Ω–Ω—ã—Ö –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è', error)
        return null
      }
    },
    [isCameraOn] // –≤ –∑–∞–≤–∏—Å–∏–º–æ—Å—Ç—è—Ö –∑–∞–º—É—á–µ–Ω –ª–∏ –º–∏–∫—Ä–æ—Ñ–æ–Ω –∏ –≤–∫–ª—é—á–µ–Ω–∞ –ª–∏ –∫–∞–º–µ—Ä–∞
  )

  // –°–æ–∑–¥–∞–Ω–∏–µ Producer - –æ–±—ä–µ–∫—Ç–∞, –∫–æ—Ç–æ—Ä—ã–π –æ—Ç–ø—Ä–∞–≤–ª—è–µ—Ç –º–µ–¥–∏–∞ –¥–∞–Ω–Ω—ã–µ –Ω–∞ —Å–µ—Ä–≤–µ—Ä
  const createProducer = useCallback(
    async (transport: any, stream: MediaStream, kind: string) => {
      if (!transport || !stream) {
        console.error('ERR: !transport || !stream')
        return null
      }

      try {
        const tracks =
          kind === 'audio' ? stream.getAudioTracks() : stream.getVideoTracks()
        if (tracks.length === 0) {
          console.error('ERR: no tracks for', kind)
          return null
        }

        const track = tracks[0]
        if (track.readyState !== 'live') {
          console.error('Track is not live:', kind)
          return null
        }

        if (producersRef.current[kind]) {
          console.log('Closing existing', kind, 'producer')
          producersRef.current[kind].close()
          producersRef.current[kind] = null
        }

        console.log('Creating', kind, 'producer...')
        const producer = await transport.produce({
          track,
          appData: { mediaTag: kind },
        })

        producersRef.current[kind] = producer
        setProducers((prev) => ({ ...prev, [kind]: producer }))
        console.log(`${kind} Producer —Å–æ–∑–¥–∞–Ω:`, producer.id)

        // –í–ê–ñ–ù–û: –û—Ç–ø—Ä–∞–≤–ª—è–µ–º —Å–æ–±—ã—Ç–∏–µ –æ –Ω–æ–≤–æ–º –ø—Ä–æ–¥—é—Å–µ—Ä–µ –¥–ª—è –í–°–ï–• –≤–∏–¥–æ–≤
        if (socket && roomId) {
          socket.emit('new-producer', {
            producerId: producer.id,
            kind: kind,
            userId: userIdRef.current,
            roomId: roomId,
            username: localStorage.getItem('username'),
            avatar: localStorage.getItem('avatar'),
          })
          console.log(
            `üì§ Sent new-producer event for ${kind} producer:`,
            producer.id
          )
        }

        // –û–±—Ä–∞–±–æ—Ç—á–∏–∫–∏ —Å–æ–±—ã—Ç–∏–π –ø—Ä–æ–¥—é—Å–µ—Ä–∞
        producer.on('transportclose', () => {
          console.log('Producer transport closed:', kind)
          producersRef.current[kind] = null
          setProducers((prev) => ({ ...prev, [kind]: undefined }))
        })

        producer.on('trackended', () => {
          console.log('Producer track ended:', kind)
          producersRef.current[kind] = null
          setProducers((prev) => ({ ...prev, [kind]: undefined }))
        })

        return producer
      } catch (error) {
        console.error('–û—à–∏–±–∫–∞ –ø—Ä–∏ —Å–æ–∑–¥–∞–Ω–∏–∏ Producer:', error)
        return null
      }
    },
    [socket, roomId]
  )

  const { isSpeaking } = useAudioVolume(localStream, -30)
  const { isTransmitting } = useAudioControl({
    isSpeaking,
    isMicroMuted,
    sendTransport,
    producersRef,
    isConnected,
    localStream,
    createProducer,
    socket,
    roomId,
  })

  // –°–æ–∑–¥–∞–Ω–∏–µ Consumer - –æ–±—ä–µ–∫—Ç–∞, –∫–æ—Ç–æ—Ä—ã–π –ø–æ–ª—É—á–∞–µ—Ç –º–µ–¥–∏–∞ –¥–∞–Ω–Ω—ã–µ –æ—Ç –¥—Ä—É–≥–∏—Ö –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª–µ–π
  // Room.tsx - –≤ —Ñ—É–Ω–∫—Ü–∏–∏ handleCreateConsumer
  const handleCreateConsumer = useCallback(
    async (producerData: {
      producerId: string
      kind: string
      userId: string
    }) => {
      if (!recvTransportRef.current || !device) {
        console.error('Receive transport or device not available')
        return null
      }

      try {
        console.log(
          'Creating consumer for producer:',
          producerData.producerId,
          'kind:',
          producerData.kind
        )

        const consumer = await createConsumer(
          producerData.producerId,
          //@ts-ignore
          device.rtpCapabilities
        )

        if (!consumer) {
          console.error(
            'Failed to create consumer for producer:',
            producerData.producerId
          )
          return null
        }

        console.log(
          'Consumer created successfully:',
          consumer.id,
          'kind:',
          consumer.kind
        )

        if (consumer.kind === 'audio' && consumer.track) {
          // –£–ª—É—á—à–µ–Ω–Ω–∞—è –æ–±—Ä–∞–±–æ—Ç–∫–∞ –∞—É–¥–∏–æ —ç–ª–µ–º–µ–Ω—Ç–∞
          const audioElement = document.createElement('audio')
          audioElement.srcObject = new MediaStream([consumer.track])
          audioElement.autoplay = true
          // @ts-ignore
          audioElement.playsInline = true
          audioElement.muted = false
          audioElement.style.display = 'none'

          // –î–æ–±–∞–≤–ª—è–µ–º –æ–±—Ä–∞–±–æ—Ç—á–∏–∫–∏ –¥–ª—è —É–ø—Ä–∞–≤–ª–µ–Ω–∏—è –≤–æ—Å–ø—Ä–æ–∏–∑–≤–µ–¥–µ–Ω–∏–µ–º
          audioElement.oncanplaythrough = () => {
            console.log(
              'Audio element ready to play for consumer:',
              consumer.id
            )
          }

          audioElement.onerror = (error) => {
            console.error(
              'Audio element error for consumer:',
              consumer.id,
              error
            )
          }

          document.body.appendChild(audioElement)
          consumer.audioElement = audioElement

          // –£–ª—É—á—à–µ–Ω–Ω–∞—è —Ñ—É–Ω–∫—Ü–∏—è –≤–æ—Å–ø—Ä–æ–∏–∑–≤–µ–¥–µ–Ω–∏—è —Å –æ–±—Ä–∞–±–æ—Ç–∫–æ–π –ø—Ä–µ—Ä—ã–≤–∞–Ω–∏–π
          const playAudioWithRetry = async (retryCount = 0) => {
            try {
              await audioElement.play()
              console.log(
                'Audio playing successfully for consumer:',
                consumer.id
              )
            } catch (error: any) {
              if (error.name === 'AbortError') {
                console.log(
                  'Audio play was aborted, this is normal during stream changes'
                )
                // –ù–µ –ø–æ–≤—Ç–æ—Ä—è–µ–º –ø–æ–ø—ã—Ç–∫—É –¥–ª—è AbortError - —ç—Ç–æ –Ω–æ—Ä–º–∞–ª—å–Ω–æ –ø—Ä–∏ —Å–º–µ–Ω–µ —Å—Ç—Ä–∏–º–æ–≤
                return
              } else if (error.name === 'NotAllowedError') {
                console.log('Audio play not allowed, user interaction required')
                return
              } else {
                console.error(
                  '–û—à–∏–±–∫–∞ –ø—Ä–∏ –≤–æ—Å–ø—Ä–æ–∏–∑–≤–µ–¥–µ–Ω–∏–∏ –∑–≤—É–∫–∞ –æ—Ç consumer:',
                  error,
                  'retry count:',
                  retryCount
                )

                // –ü–æ–≤—Ç–æ—Ä—è–µ–º –ø–æ–ø—ã—Ç–∫—É —Ç–æ–ª—å–∫–æ –¥–ª—è –æ–ø—Ä–µ–¥–µ–ª–µ–Ω–Ω—ã—Ö –æ—à–∏–±–æ–∫
                if (retryCount < 3 && error.name !== 'AbortError') {
                  setTimeout(
                    () => playAudioWithRetry(retryCount + 1),
                    100 * (retryCount + 1)
                  )
                }
              }
            }
          }

          playAudioWithRetry()
        }

        return consumer
      } catch (error) {
        console.error('–û—à–∏–±–∫–∞ –ø—Ä–∏ —Å–æ–∑–¥–∞–Ω–∏–∏ consumer:', error)
        return null
      }
    },
    [device, createConsumer]
  )

  // –ë–∞–∑–æ–≤–∞—è –æ—á–∏—Å—Ç–∫–∞ –ø—Ä–∏ —Ä–∞–∑–º–æ–Ω—Ç–∏—Ä–æ–≤–∞–Ω–∏–∏
  useEffect(() => {
    return () => {
      if (reconnectTimeoutRef.current) {
        clearTimeout(reconnectTimeoutRef.current) // –æ—á–∏–∑–∞–µ–º —Ç–∞–π–º–µ—Ä –ø–µ—Ä–µ–ø–æ–¥–∫–ª—é—á–µ–Ω–∏—è
      }
    }
  }, [])

  // –û–±—Ä–∞–±–æ—Ç–∫–∞ –Ω–æ–≤—ã—Ö –ø—Ä–æ–¥—é—Å–µ—Ä–æ–≤ (—Ç–µ, –∫–æ—Ç–æ—Ä—ã–µ –≤–æ—Å–ø—Ä–æ–∏–∑–≤–æ–¥—è—Ç)
  useEffect(() => {
    if (!socket || !device) return // –µ—Å–ª–∏ —Å–æ–∫–µ—Ç –∏–ª–∏ –¥–µ–≤–∞–π—Å –Ω–µ –∏–Ω–∏—Ü–∏–∞–ª–∏–∑–∏—Ä–æ–≤–∞–Ω—ã - –ø—Ä–µ–∫—Ä–∞—â–∞–µ–º —Ä–∞–±–æ—Ç—É —Ñ—É–Ω–∫—Ü–∏–∏

    const handleNewProducer = async (data: {
      // —Ñ—É–Ω–∫—Ü–∏—è –ø–æ–ª—É—á–µ–Ω–∏—è –Ω–æ–≤–æ–≥–æ –ø—Ä–æ–¥—é—Å–µ—Ä–∞
      producerId: string // –∞–π–¥–∏ –ø—Ä–æ–¥—é—Å–µ—Ä–∞
      kind: string // —Ç–∏–ø –º–µ–¥–∏–∞ –¥–∞–Ω–Ω—ã—Ö
      userId: string // –∞–π–¥–∏ —é–∑–µ—Ä–∞, –æ—Ç –∫–æ—Ç–æ—Ä–æ–≥–æ –ø–æ–ª—É—á–∞–µ–º –ø—Ä–æ–¥—é—Å–µ—Ä
      username?: string // –Ω–∏–∫ —é–∑–µ—Ä–∞
      avatar?: string // –∞–≤–∞—Ç–∞—Ä–∫–∞ —é–∑–µ—Ä–∞
    }) => {
      if (consumers[data.producerId]) {
        return
      }
      const existingAudioConsumer = Object.values(consumers).find(
        (consumerData) =>
          consumerData.userId === data.userId &&
          consumerData.kind === 'audio' &&
          data.kind === 'audio'
      )

      if (existingAudioConsumer) {
        return
      }
      try {
        console.log(
          'Received new producer:',
          data.producerId,
          data.kind,
          'from user:',
          data.userId
        ) // –ª–æ–≥–∏—Ä—É–µ–º –ø–æ–ª—É—á–µ–Ω–∏–µ –Ω–æ–≤–æ–≥–æ –ø—Ä–æ–¥—é—Å–µ—Ä–∞

        if (data.userId === userIdRef.current) {
          // –µ—Å–ª–∏ —ç—Ç–æ –Ω–∞—à –ø—Ä–æ–¥—é—Å–µ—Ä, —Ç–æ –∑–∞–∫–∞–Ω—á–∏–≤–∞–µ–º —Ñ—É–Ω–∫—Ü–∏—é - –Ω–∞–º –Ω–µ –Ω—É–∂–Ω–æ –¥–µ–ª–∞—Ç—å –ø—Ä–æ—Å–ª—É—à–∏–≤–∞—Ç—å –Ω–∞—à–∏—Ö –∂–µ –º–µ–¥–∏–∞ –¥–∞–Ω–Ω—ã—Ö
          console.log('Skipping own producer')
          return
        }

        // 1. –°–Ω–∞—á–∞–ª–∞ —Å–æ–∑–¥–∞—ë–º consumer –¥–ª—è –Ω–æ–≤–æ–≥–æ –ø—Ä–æ–¥—é—Å–µ—Ä–∞
        const consumer = await handleCreateConsumer(data)
        if (!consumer) {
          // –ï—Å–ª–∏ –Ω–µ —É–¥–∞–ª–æ—Å—å —Å–æ–∑–¥–∞—Ç—å consumer ‚Äî –≤—ã—Ö–æ–¥–∏–º
          return
        }
        // 2. –û–±–Ω–æ–≤–ª—è–µ–º consumers: —É–¥–∞–ª—è–µ–º —Å—Ç–∞—Ä—ã–µ —Å —ç—Ç–∏–º userId –∏ –¥–æ–±–∞–≤–ª—è–µ–º –Ω–æ–≤—ã–π
        setConsumers((prev: any) => {
          // –ï—Å–ª–∏ —É–∂–µ –µ—Å—Ç—å consumer —Å —ç—Ç–∏–º producerId ‚Äî –Ω–∏—á–µ–≥–æ –Ω–µ –¥–µ–ª–∞–µ–º
          if (prev[data.producerId]) return prev

          // –î–æ–±–∞–≤–ª—è–µ–º –Ω–æ–≤—ã–π consumer
          return {
            ...prev,
            [data.producerId]: {
              consumer,
              kind: data.kind,
              userId: data.userId,
              username: data.username,
              avatar: data.avatar,
            },
          }
        })

        // Room.tsx - –≤ –æ–±—Ä–∞–±–æ—Ç—á–∏–∫–∞—Ö —Å–æ–±—ã—Ç–∏–π –∫–æ–Ω—Å—é–º–µ—Ä–∞
        consumer.on('transportclose', () => {
          // –ë–µ–∑–æ–ø–∞—Å–Ω–æ–µ —É–¥–∞–ª–µ–Ω–∏–µ –∞—É–¥–∏–æ —ç–ª–µ–º–µ–Ω—Ç–∞
          if (consumer.audioElement) {
            try {
              consumer.audioElement.pause()
              consumer.audioElement.srcObject = null
              consumer.audioElement.remove()
            } catch (error) {
              console.error('Error cleaning up audio element:', error)
            }
          }
          console.log(
            'Consumer transport closed for producer:',
            data.producerId
          )
          setConsumers((prev) => {
            const newConsumers = { ...prev }
            delete newConsumers[data.producerId]
            return newConsumers
          })
        })

        consumer.on('producerclose', () => {
          console.log('Producer closed, removing consumer:', data.producerId)
          // –ë–µ–∑–æ–ø–∞—Å–Ω–æ–µ —É–¥–∞–ª–µ–Ω–∏–µ –∞—É–¥–∏–æ —ç–ª–µ–º–µ–Ω—Ç–∞
          if (consumer.audioElement) {
            try {
              consumer.audioElement.pause()
              consumer.audioElement.srcObject = null
              consumer.audioElement.remove()
            } catch (error) {
              console.error('Error cleaning up audio element:', error)
            }
          }
          setConsumers((prev) => {
            const newConsumers = { ...prev }
            delete newConsumers[data.producerId]
            return newConsumers
          })
        })
      } catch (error) {
        console.error('–û—à–∏–±–∫–∞ –ø—Ä–∏ —Å–æ–∑–¥–∞–Ω–∏–∏ consumer:', error) // –ª–æ–≥–∏—Ä–æ–≤–∞–Ω–∏–µ –æ—à–∏–±–æ–∫
      }
    }

    const handleProducerClose = (data: { producerId: string }) => {
      // –æ–±—Ä–∞–±–æ—Ç—á–∏–∫ –∑–∞–∫—Ä—ã—Ç–∏—è –ø—Ä–æ–¥—é—Å–µ—Ä–æ–≤
      console.log('Producer closed:', data.producerId) // –ª–æ–≥–∏—Ä–æ–≤–∞–Ω–∏–µ —Ç–æ–≥–æ, —á—Ç–æ –∑–∞–∫—Ä—ã–ª—Å—è –æ–ø—Ä–µ–¥–µ–ª–Ω–Ω—ã–π –ø—Ä–æ–¥—é—Å–µ—Ä
      setConsumers((prev) => {
        // –∏–∑–º–µ–Ω—è–µ–º –º–∞—Å—Å–∏–≤ –∫–æ–Ω—Å—é–º–µ—Ä–æ–≤
        const newConsumers = { ...prev } // –ø–æ–ª—É—á–∞–µ–º –≤—Å–µ –∫–æ–Ω—Å—é–º–µ—Ä—ã
        if (newConsumers[data.producerId]) {
          // –µ—Å–ª–∏ –≤ –∫–æ–Ω—Å—é–º–µ—Ä–∞—Ö –µ—Å—Ç—å –∫–ª—é—á —Å –∞–π–¥–∏ –Ω–∞—à–µ–≥–æ –∫–æ–Ω—Å—é–º–µ—Ä–∞, –∫–æ—Ç–æ—Ä—ã–π –Ω—É–∂–Ω–æ –∑–∞–∫—Ä—ã—Ç—å
          if (
            newConsumers[data.producerId].consumer && // –∏ –≤ —ç—Ç–æ–º –∫–ª—é—á–µ –µ—Å—Ç—å —Å–∞–º –∫–æ–Ω—Å—é–º–µ—Ä
            !newConsumers[data.producerId].consumer.closed // –∏ —ç—Ç–æ—Ç –∫–æ–Ω—Å—é–º–µ—Ä –Ω–µ –∑–∞–∫—Ä—ã—Ç
          ) {
            newConsumers[data.producerId].consumer.close() // —Ç–æ –∑–∞–∫—Ä—ã–≤–∞–µ–º –µ–≥–æ
          }
          if (newConsumers[data.producerId].consumer?.audioElement) {
            // –µ—Å–ª–∏ –≤–Ω—É—Ç—Ä–∏ –∫–æ–Ω—Å—é–º–µ—Ä–∞ –µ—Å—Ç—å —Å—Å—ã–ª–∫–∞ –Ω–∞ –∞—É–¥–∏–æ —ç–ª–µ–º–µ–Ω—Ç
            newConsumers[data.producerId].consumer.audioElement.remove() // —É–¥–∞–ª—è–µ–º —ç—Ç–æ—Ç –∞—É–¥–∏–æ —ç–ª–µ–º–µ–Ω—Ç
          }
          delete newConsumers[data.producerId] // —É–¥–∞–ª—è–µ–º –∏–∑ –º–∞—Å—Å–∏–≤–∞ –∫–æ–Ω—Å—é–º–µ—Ä —Å –Ω—É–∂–Ω—ã–º –∞–π–¥–∏—à–Ω–∏–∫–æ–º
        }

        return newConsumers // –≤–æ–∑–≤—Ä–∞—â–∞–µ–º –∏–∑–º–µ–Ω–µ–Ω–Ω—ã–π –º–∞—Å—Å–∏–≤
      })
    }

    // –ü–æ–ª—É—á–µ–Ω–∏–µ —Å—É—â–µ—Å—Ç–≤—É—é—â–∏—Ö –ø—Ä–æ–¥—é—Å–µ—Ä–æ–≤
    const handleExistingProducers = async (
      producersList: Array<{
        // –ø–æ–ª—É—á–∞–µ–º —Å–ø–∏—Å–æ–∫ –ø—Ä–æ–¥—é—Å–µ—Ä–æ–≤, –∫–æ—Ç–æ—Ä—ã–µ —Å–æ—Å—Ç–æ—è—Ç –∏–∑
        producerId: string // –∞–π–¥–∏ –ø—Ä–æ–¥—é—Å–µ—Ä–∞
        kind: string // —Ç–∏–ø –ø—Ä–æ–¥—é—Å–µ—Ä–∞ (–≤–∏–¥–µ–æ –∏–ª–∏ –∞—É–¥–∏–æ)
        userId: string // –∞–π–¥–∏ —é–∑–µ—Ä–∞ –¥–∞–Ω–Ω–æ–≥–æ –ø—Ä–æ–¥—é—Å–µ—Ä–∞
        username?: string // –Ω–∏–∫–Ω–µ–π–º —é–∑–µ—Ä–∞ –¥–∞–Ω–Ω–æ–≥–æ –ø—Ä–æ–¥—é—Å–µ—Ä–∞
        avatar?: string // –∞–≤–∞—Ç–∞—Ä–∫–∞ —é–∑–µ—Ä–∞ –¥–∞–Ω–Ω–æ–≥–æ –ø—Ä–æ–¥—é—Å–µ—Ä–∞
      }>
    ) => {
      console.log('Received existing producers:', producersList) // –ª–æ–≥–∏—Ä—É–µ–º –ø–æ–ª—É—á–µ–Ω–∏–µ —É–∂–µ —Å—É—â–µ—Å—Ç–≤—É—é—â–∏—Ö –ø—Ä–æ–¥—é—Å–µ—Ä–æ–≤

      for (const producer of producersList) {
        // –ø—Ä–æ—Ö–æ–¥–∏–º—Å—è –ø–æ –∫–∞–∂–¥–æ–º—É –ø—Ä–æ–¥—é—Å–µ—Ä—É –∏–∑ —Å–ø–∏—Å–∫–∞

        if (consumers[producers.producerId]) continue

        if (producer.userId !== userIdRef.current) {
          // –µ—Å–ª–∏ —ç—Ç–æ—Ç –ø—Ä–æ–¥—é—Å–µ—Ä –Ω–µ —è–≤–ª—è–µ—Ç—Å—è –Ω–∞—à–∏–º
          await handleNewProducer(producer) // –≤—ã–∑—ã–≤–∞–µ–º —Ñ—É–Ω–∫—Ü–∏—é –æ–±—Ä–∞–±–æ—Ç—á–∏–∫ –Ω–æ–≤–æ–≥–æ –ø—Ä–æ–¥—é—Å–µ—Ä–∞, –∫–æ—Ç–æ—Ä–∞—è —Å–æ–∑–¥–∞—Å—Ç –∫–æ–Ω—Å—é–º–µ—Ä –∏–∑ —ç—Ç–æ–≥–æ –ø—Ä–æ–¥—é—Å–µ—Ä–∞ –¥–ª—è –ø–æ–ª—É—á–µ–Ω–∏—è –º–µ–¥–∏–∞ –¥–∞–Ω–Ω—ã—Ö –æ—Ç –¥—Ä—É–≥–æ–≥–æ –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è
        }
      }
    }

    socket.on('new-producer', handleNewProducer) // –æ–±—Ä–∞–±–æ—Ç—á–∏–∫ —Å–æ–∫–µ—Ç–∞ –æ –Ω–æ–≤–æ–º –ø—Ä–æ–¥—é—Å–µ—Ä–µ
    socket.on('producer-close', handleProducerClose) // –æ–±—Ä–∞–±–æ—Ç—á–∏–∫ —Å–æ–∫–µ—Ç–∞ –æ –∑–∞–∫—Ä—ã—Ç–∏–∏ –ø—Ä–æ–¥—é—Å–µ—Ä–∞
    socket.on('existing-producers', handleExistingProducers) // –æ–±—Ä–∞–±–æ—Ç—á–∏–∫ —Å–æ–∫–µ—Ç–∞ –æ –≤—Å–µ—Ö —Å—É—â–µ—Å—Ç–≤—É—é—â–∏—Ö –ø—Ä–æ–¥—é—Å–µ—Ä–∞—Ö

    // –ó–∞–ø—Ä–∞—à–∏–≤–∞–µ–º —Å—É—â–µ—Å—Ç–≤—É—é—â–∏–µ –ø—Ä–æ–¥—é—Å–µ—Ä—ã –ø—Ä–∏ –ø–æ–¥–∫–ª—é—á–µ–Ω–∏–∏ (—Ç–æ–ª—å–∫–æ –æ–¥–∏–Ω —Ä–∞–∑)
    if (roomId && recvTransportRef.current) {
      // –µ—Å–ª–∏ –º—ã –Ω–∞—Ö–æ–¥–∏–º—Å—è –≤ —Ä—É–º–µ –∏ —Ç—Ä–∞–Ω—Å–ø–æ—Ä—Ç –ø–æ–ª—É—á–µ–Ω–∏—è –∏–Ω–∏—Ü–∏–∞–ª–∏–∑–∏—Ä–æ–≤–∞–Ω
      console.log('Requesting existing producers for room:', roomId) // –ª–æ–≥–∏—Ä—É–µ–º —Ç–æ, —á—Ç–æ –∑–∞–ø—Ä–∞—à–∏–≤–∞–µ–º —Å—É—â–µ—Å—Ç–≤—É—é—â–∏—Ö –ø—Ä–æ–¥—é—Å–µ—Ä–æ–≤
      socket.emit('get-producers', roomId) // –¥–µ–ª–∞–µ–º –∑–∞–ø—Ä–æ—Å —É —Å–æ–∫–µ—Ç–∞ –Ω–∞ —Å—É—â–µ—Å—Ç–≤—É—é—â–∏—Ö –ø—Ä–æ–¥—é—Å–µ—Ä–æ–≤
    }

    return () => {
      // cleanup –æ–±—Ä–∞–±–æ—Ç—á–∏–∫–æ–≤ —Å–æ–∫–µ—Ç–æ–≤
      socket.off('new-producer', handleNewProducer)
      socket.off('producer-close', handleProducerClose)
      socket.off('existing-producers', handleExistingProducers)
    }
  }, [socket, device, consumers, roomId, handleCreateConsumer]) // –∑–∞–≤–∏—Å–∏–º–æ—Å—Ç–∏

  // —Ñ—É–Ω–∫—Ü–∏—è –≤—ã—Ö–æ–¥–∞ –∏–∑ –∫–æ–º–Ω–∞—Ç—ã
  const leaveRoom = useCallback(async () => {
    console.log('Leaving room:', roomId) // –ª–æ–≥–∏—Ä—É–µ–º –≤—ã—Ö–æ–¥ –∏–∑ –∫–æ–º–Ω–∞—Ç—ã

    if (socket && roomId) {
      // –µ—Å–ª–∏ —Å–æ–∫–µ—Ç –∏ –∞–π–¥–∏ –∫–æ–º–Ω–∞—Ç—ã –∏–Ω–∏—Ü–∏–∞–ª–∏–∑–∏—Ä–æ–≤–∞–Ω—ã
      socket.emit('leave-room', { roomId }) // –≤—ã–≤–æ–¥–∏–º —Å–æ–∫–µ—Ç—É, —á—Ç–æ –ø–æ–∫–∏–¥–∞–µ–º –∫–æ–º–Ω–∞—Ç—É —Å –æ–ø—Ä–µ–¥–µ–ª–µ–Ω–Ω—ã–º –∞–π–¥–∏
    }

    closeTransports() // –∑–∞–∫—Ä—ã–≤–∞–µ–º –≤—Å–µ —Ç—Ä–∞–Ω—Å–ø–æ—Ä—Ç—ã (–∫–∞–∫ –∏ –¥–ª—è –æ—Ç–ø—Ä–∞–≤–∫–∏, —Ç–∞–∫ –∏ –¥–ª—è –ø–æ–ª—É—á–µ–Ω–∏—è)

    if (localStream) {
      // –µ—Å–ª–∏ –ª–æ–∫–∞–ª—å–Ω—ã–π —Å—Ç—Ä–∏–º –∏–Ω–∏—Ü–∏–∞–ª–∏–∑–∏—Ä–æ–≤–∞–Ω
      localStream.getTracks().forEach((track) => track.stop()) // –∑–∞–∫—Ä—ã–≤–∞–µ–º –≤—Å–µ —Ç—Ä–µ–∫–∏ –ª–æ–∫–∞–ª—å–Ω–æ–≥–æ —Å—Ç—Ä–∏–º–∞
      setLocalStream(null) // –æ–±–Ω—É–ª—è–µ–º state –ª–æ–∫–∞–ª—å–Ω–æ–≥–æ —Å—Ç—Ä–∏–º–∞
    }

    // –ó–∞–∫—Ä—ã–≤–∞–µ–º producers
    Object.values(producersRef.current).forEach((producer) => {
      // –ø—Ä–æ—Ö–æ–¥–∏–º—Å—è –ø–æ –∫–∞–∂–¥–æ–º—É –ø—Ä–æ–¥—é—Å–µ—Ä—É
      if (producer && typeof producer.close === 'function') {
        // –µ—Å–ª–∏ –ø—Ä–æ–¥—é—Å–µ—Ä –∏–Ω–∏—Ü–∏–∞–ª–∏–∑–∏—Ä–æ–≤–∞–Ω –∏ —É –Ω–µ–≥–æ –µ—Å—Ç—å —Ñ—É–Ω–∫—Ü–∏—è –∑–∞–∫—Ä—ã—Ç–∏—è (–≤—Ç–æ—Ä–æ–µ –¥–ª—è ts)
        producer.close() // —Ç–æ –∑–∞–∫—Ä—ã–≤–∞–µ–º –ø—Ä–æ–¥—é—Å–µ—Ä
      }
    })
    producersRef.current = {} // –æ–±–Ω—É–ª—è–µ–º –º–∞—Å—Å–∏–≤ –ø—Ä–æ–¥—é—Å–µ—Ä–æ–≤
    setProducers({}) // –æ–±–Ω—É–ª—è–µ–º state –º–∞—Å—Å–∏–≤ –ø—Ä–æ–¥—é—Å–µ—Ä–æ–≤

    // –ó–∞–∫—Ä—ã–≤–∞–µ–º –∫–æ–Ω—Å—é–º–µ—Ä—ã
    Object.values(consumers).forEach((consumerData) => {
      // –ø—Ä–æ—Ö–æ–¥–∏–º—Å—è –ø–æ –∫–∞–∂–¥–æ–º—É –∫–æ–Ω—Å—é–º–µ—Ä—É
      if (
        consumerData.consumer && // –µ—Å–ª–∏ –∫–æ–Ω—Å—é–º–µ—Ä –∏–Ω–∏—Ü–∏–∞–ª–∏–∑–∏—Ä–æ–≤–∞–Ω
        typeof consumerData.consumer.close === 'function' // –∏ –æ–Ω –∏–º–µ–µ—Ç —Ñ—É–Ω–∫—Ü–∏—é –∑–∞–∫—Ä—ã—Ç–∏—è
      ) {
        consumerData.consumer.close() // —Ç–æ–≥–¥–∞ –∑–∞–∫—Ä—ã–≤–∞–µ–º —ç—Ç–æ—Ç –∫–æ–Ω—Å—é–º–µ—Ä
      }
      if (consumerData.consumer?.audioElement) {
        // –µ—Å–ª–∏ –≤ –∫–æ–Ω—Å—é–º–µ—Ä–µ —Å–æ—Ö—Ä–∞–Ω–µ–Ω–∞ —Å—Å—ã–ª–∫–∞ –Ω–∞ –∞—É–¥–∏–æ—ç–ª–µ–º–µ–Ω—Ç
        consumerData.consumer.audioElement.remove() // —Ç–æ —É–¥–∞–ª—è–µ–º —ç—Ç–æ—Ç —ç–ª–µ–º–µ–Ω—Ç –∏–∑ DOM
      }
    })
    setConsumers({}) // –æ–±–Ω—É–ª—è–µ–º state –º–∞—Å—Å–∏–≤–∞ –∫–æ–Ω—Å—é–º–µ—Ä–æ–≤

    setIsConnected(false) // –º–µ–Ω—è–µ–º —Å—Ç–∞—Ç—É—Å –ø–æ–¥–∫–ª—é—á–µ–Ω–∏—è –Ω–∞ false
    isInitializedRef.current = false // —Å–±—Ä–∞—Å—ã–≤–∞–µ–º —Ñ–ª–∞–≥ –∏–Ω–∏—Ü–∏–∞–ª–∏–∑–∞—Ü–∏–∏
    if (leaveSoundRef.current) {
      if (!leaveSoundRef.current.paused) {
        leaveSoundRef.current.pause()
      }

      leaveSoundRef.current.currentTime = 0
      leaveSoundRef.current.play()
    }
  }, [socket, roomId, localStream, consumers, closeTransports]) // –ø—Ä–æ–ø–∏—Å—ã–≤–∞–µ–º –∑–∞–≤–∏—Å–∏–º–æ—Å—Ç–∏

  // –õ–æ–≥–∏—Ä–æ–≤–∞–Ω–∏–µ Socket —Å–æ–±—ã—Ç–∏–π
  useEffect(() => {
    if (!socket) return // –ø—Ä–æ–≤–µ—Ä–∫–∞ –Ω–∞ –∏–Ω–∏—Ü–∏–∞–ª–∏–∑–∞—Ü–∏—é —Å–æ–∫–µ—Ç–∞

    const originalEmit = socket.emit // –ø–µ—Ä–µ—Ö–≤–∞—Ç—ã–≤–∞–µ–º socket.emit –¥–ª—è –ª–æ–≥–∏—Ä–æ–≤–∞–Ω–∏—è –∏—Å—Ö–æ–¥—è—â–∏—Ö —Å–æ–±—ã—Ç–∏–π
    socket.emit = function (...args) {
      // –ª–æ–≥–∏—Ä—É–µ–º –≤—Ö–æ–¥—è—â–∏–µ —Å–æ–±—ã—Ç–∏—è
      console.log('üì§ SOCKET EMIT:', args[0], args[1])
      return originalEmit.apply(this, args)
    }

    const logEvent = (eventName: string, data: any) => {
      console.log('üì• SOCKET EVENT:', eventName, data)
    }

    socket.on('new-producer', (data) => logEvent('new-producer', data))
    socket.on('existing-producers', (data) =>
      logEvent('existing-producers', data)
    )
    socket.on('producer-close', (data) => logEvent('producer-close', data))

    return () => {
      // –≤–æ—Å—Å—Ç–∞–Ω–∞–≤–ª–∏–≤–∞–µ–º –æ—Ä–∏–≥–∏–Ω–∞–ª—å–Ω—ã–π emit –ø—Ä–∏ cleanup
      socket.emit = originalEmit
      socket.off('new-producer')
      socket.off('existing-producers')
      socket.off('producer-close')
    }
  }, [socket]) // –Ω–∞—Å—Ç—Ä–∞–∏–≤–∞–µ–º –∑–∞–≤–∏—Å–∏–º–æ—Å—Ç–∏

  // –û—Å–Ω–æ–≤–Ω–∞—è –ª–æ–≥–∏–∫–∞ –ø–æ–¥–∫–ª—é—á–µ–Ω–∏—è (–∏–Ω–∏—Ü–∏–∞–ª–∏–∑–∞—Ü–∏–∏)
  useEffect(() => {
    const initializeRoom = async () => {
      // —Ñ—É–Ω–∫—Ü–∏—è –∏–Ω–∏—Ü–∏–∞–ª–∏–∑–∞—Ü–∏–∏ –∫–æ–º–Ω–∞—Ç—ã
      if (!isDeviceInitialized || !roomId || isInitializedRef.current) {
        // –ø—Ä–æ–≤–µ—Ä–∫–∞, —á—Ç–æ –¥–µ–≤–∞–π—Å –∏ –∞–π–¥–∏ –∫–æ–º–Ω–∞—Ç—ã –∏–Ω–∏—Ü–∏–∞–ª–∏–∑–∏—Ä–æ–≤–∞–Ω—ã, –∏ —á—Ç–æ –∫–æ–º–Ω–∞—Ç–∞ –µ—â–µ –Ω–µ –∏–Ω–∏—Ü–∏–∞–ª–∏–∑–∏—Ä–æ–≤–∞–Ω–∞
        return
      }

      try {
        console.log('Step 1: Initializing room...')
        isInitializedRef.current = true // –≤—ã—Å—Ç–∞–≤–ª—è–µ–º, —á—Ç–æ –∫–æ–º–Ω–∞—Ç–∞ –∏–Ω–∏—Ü–∏–∞–ª–∏–∑–∏—Ä–æ–≤–∞–Ω–∞

        console.log('Step 2: Creating transports...')
        const { sendTransport, recvTransport } = await createTransports() // —Å–æ–∑–¥–∞–µ–º —Ç—Ä–∞–Ω—Å–ø–æ—Ä—Ç—ã –æ—Ç–ø—Ä–∞–≤–∫–∏ –∏ –ø–æ–ª—É—á–µ–Ω–∏—è –º–µ–¥–∏–∞ –¥–∞–Ω–Ω—ã—Ö

        if (!sendTransport || !recvTransport) {
          // –ø—Ä–æ–≤–µ—Ä–∫–∞, —á—Ç–æ —Ç—Ä–∞–Ω—Å–ø–æ—Ä—Ç—ã —Å–æ–∑–¥–∞–ª–∏—Å—å –∫–æ—Ä—Ä–µ–∫—Ç–Ω–æ
          throw new Error('Failed to create transports') // –ª–æ–≥–∏—Ä–æ–≤–∞–Ω–∏–µ –æ—à–∏–±–∫–∏
        }

        setSendTransport(sendTransport) // —Å–æ—Ö—Ä–∞–Ω—è–µ–º —Ç—Ä–∞–Ω—Å–ø–æ—Ä—Ç –æ—Ç–ø—Ä–∞–≤–∫–∏
        recvTransportRef.current = recvTransport // —Å–æ—Ö—Ä–∞–Ω—è–µ–º —Ç—Ä–∞–Ω—Å–ø–æ—Ä—Ç –ø–æ–ª—É—á–µ–Ω–∏—è
        console.log('Step 3: Transports created successfully')

        console.log('Step 4: Getting media stream...')
        const stream = await getMediaStream(isCameraOn) // –ø–æ–ª—É—á–∞–µ–º –ª–æ–∫–∞–ª—å–Ω—ã–π —Å—Ç—Ä–∏–º —Å –∏–ª–∏ –±–µ–∑ –∫–∞–º–µ—Ä—ã
        if (!stream) {
          throw new Error('Failed to get media stream')
        }

        setLocalStream(stream) // —Å–æ—Ö—Ä–∞–Ω—è–µ–º –ª–æ–∫–∞–ª—å–Ω—ã–π —Å—Ç—Ä–∏–º –≤ state –ø–µ—Ä–µ–º–µ–Ω–Ω–æ–π
        console.log('Step 5: Media stream obtained')

        console.log('Step 6: Creating producers...')

        if (isCameraOn) {
          // –µ—Å–ª–∏ –∫–∞–º–µ—Ä–∞ –≤–∫–ª—é—á–µ–Ω–∞, —Ç–æ —Å–æ–∑–¥–∞–µ–º –ø—Ä–æ–¥—é—Å–µ—Ä –æ—Ç–ø—Ä–∞–≤–∫–∏ –Ω–∞—à–µ–≥–æ –≤–∏–¥–µ–æ
          await createProducer(sendTransport, stream, 'video')
        }

        setIsConnected(true) // –≤—ã—Å—Ç–∞–≤–ª—è–µ–º state, —á—Ç–æ –º—ã –ø–æ–¥–∫–ª—é—á–∏–ª–∏—Å—å
        setReconnectAttempts(0) // —Å–±—Ä–∞—Å—ã–≤–∞–µ–º –∫–æ–ª–∏—á–µ—Å—Ç–≤–æ –ø–æ–ø—ã—Ç–æ–∫ –ø–µ—Ä–µ–ø–æ–¥–∫–ª—é—á–µ–Ω–∏—è
        console.log('Room initialization completed successfully') // –ª–æ–≥–∏—Ä–æ–≤–∞–Ω–∏–µ —É—Å–ø–µ—à–Ω–æ–≥–æ –ø–æ–¥–∫–ª—é—á–µ–Ω–∏—è

        socket?.emit('joined-to-room', roomId)
      } catch (error) {
        // –æ—Ç–ª–∞–¥–∫–∞ –æ—à–∏–±–æ–∫
        console.error('Room initialization failed:', error) // –ª–æ–≥–∏—Ä—É–µ–º
        isInitializedRef.current = false // –≤—ã—Å—Ç–∞–≤–ª—è–µ–º, —á—Ç–æ –∫–æ–º–Ω–∞—Ç–∞ –Ω–µ –∏–Ω–∏—Ü–∏–∞–ª–∏–∑–∏—Ä–æ–≤–∞–Ω–∞
        setReconnectAttempts((prev) => prev + 1) // —É–≤–µ–ª–∏—á–∏–≤–∞–µ–º state –∫–æ–ª–∏—á–µ—Å—Ç–≤–∞ –ø–µ—Ä–µ–ø–æ–¥–∫–ª—é—á–µ–Ω–∏–π—ã

        // —É–º–Ω–∞—è —Å—Ç—Ä–∞—Ç–µ–≥–∏—è –ø–æ–≤—Ç–æ—Ä–Ω—ã—Ö –ø–æ–ø—ã—Ç–æ–∫ –ø–æ–¥–∫–ª—é—á–µ–Ω–∏—è
        if (reconnectAttempts < 3) {
          // –µ—Å–ª–∏ –∫–æ–ª–∏—á–µ—Å—Ç–≤–æ –ø–æ–ø—ã—Ç–æ–∫ –º–µ–Ω—å—à–µ 3 —Ç–æ –ø—Ä–æ–±—É–µ–º –µ—â–µ —Ä–∞–∑ (–∏–∑–±–µ–∂–∞–Ω–∏–µ –±–µ—Å–∫–æ–Ω–µ—á–Ω—ã—Ö –ø–æ–ø—ã—Ç–æ–∫ –ø–æ–¥–∫–ª—á—é–µ–Ω–∏—è)
          const delay = Math.min(1000 * Math.pow(2, reconnectAttempts), 8000) // –≤—ã—á–∏–ª–µ–Ω–∏–µ –∑–∞–¥–µ—Ä–∂–∫–∏
          // Math.pow(2, reconnectAttempts) - –≤–æ–∑–≤–æ–¥–∏–º –¥–≤–æ–π–∫—É –≤ —Å—Ç–µ–ø–µ–Ω—å —Å–æ –∑–Ω–∞—á–µ–Ω–∏–µ–º –∫–æ–ª–∏—á–µ—Å—Ç–≤–∞ –ø–æ–ø—ã—Ç–æ–∫
          // 1000 * Math.pow(2, reconnectAttempts) - –ø–µ—Ä–µ–≤–æ–¥–∏–º –≤ –º–∏–ª–ª–∏—Å–µ–∫—É–Ω–¥—ã
          // Math.min(..., 8000) - –æ–≥—Ä–∞–Ω–∏—á–µ–Ω–∏–µ –º–∞–∫—Å–∏–º–∞–ª—å–Ω–æ–π –∑–∞–¥–µ—Ä–∂–∫–∏
          reconnectTimeoutRef.current = setTimeout(() => {
            // –∑–∞–ø—É—Å–∫–µ–º —Ç–∞–π–º–µ—Ä, –∫–æ—Ç–æ—Ä—ã–π —á–µ—Ä–µ–∑ –≤—Ä–µ–º—è delay —Å–¥–µ–ª–∞–µ—Ç –ø–æ–≤—Ç–æ—Ä–Ω—É—é –ø–æ–ø—ã—Ç–∫—É –ø–æ–¥–∫–ª—é—á–µ–Ω–∏—è
            initializeRoom()
          }, delay)
          // —Ç–∞–π–º–µ—Ä —Å–æ—Ö—Ä–∞–Ω—è–µ–º –≤ ref –¥–ª—è —Ç–æ–≥–æ, —á—Ç–æ–±—ã –º–æ–∂–Ω–æ –±—ã–ª–æ –æ—Ç–º–µ–Ω–∏—Ç—å –ø—Ä–∏ —Ä–∞–∑–º–æ–Ω—Ç–∏—Ä–æ–≤–∞–Ω–∏–∏ –∫–æ–º–ø–æ–Ω–µ–Ω—Ç–∞ –∏–ª–∏ –ø—Ä–∏ —É—Å–ø–µ—à–Ω–æ–º –ø–æ–¥–∫–ª—é—á–µ–Ω–∏–∏ –¥–æ —É—Å—Ç–µ—á–µ–Ω–∏–∏ —Ç–∞–π–º–µ—Ä–∞
        }
      }
    }

    initializeRoom() // –≤—ã–∑—ã–≤–∞–µ–º —Ñ—É–Ω–∫—Ü–∏—é –∏–Ω–∏—Ü–∏–∞–ª–∏–∑–∞—Ü–∏–∏ –∫–æ–º–Ω–∞—Ç—ã

    return () => {
      // cleanup —Ç–∞–π–º–µ—Ä–∞ –ø—Ä–∏ —Ä–∞–∑–º–æ–Ω—Ç–∏—Ä–æ–≤–∞–Ω–∏–∏ (–∑–¥–µ—Å—å –Ω–∞–º –∏ –Ω—É–∂–µ–Ω ref)
      if (reconnectTimeoutRef.current) {
        clearTimeout(reconnectTimeoutRef.current)
      }
    }
  }, [
    isDeviceInitialized,
    roomId,
    createTransports,
    getMediaStream,
    isCameraOn,
    reconnectAttempts,
  ]) // –∑–∞–≤–∏—Å–∏–º–æ—Å—Ç–∏

  // –û–±—Ä–∞–±–æ—Ç–∫–∞ –∏–∑–º–µ–Ω–µ–Ω–∏–π state –º–∏–∫—Ä–æ—Ñ–æ–Ω–∞ –∏ –∫–∞–º–µ—Ä—ã
  const isUpdatingMediaRef = useRef(false)

  useEffect(() => {
    socket?.on('joined-to-room', () => {
      if (joinSoundRef.current) {
        if (!joinSoundRef.current.paused) {
          joinSoundRef.current.pause()
        }

        joinSoundRef.current.currentTime = 0
        joinSoundRef.current.play()
      }
    })

    return () => {
      socket?.off('joined-to-room')
    }
  }, [])
  useEffect(() => {
    socket?.on('leave-from-room', () => {
      if (leaveSoundRef.current) {
        if (!leaveSoundRef.current.paused) {
          leaveSoundRef.current.pause()
        }

        leaveSoundRef.current.currentTime = 0
        leaveSoundRef.current.play()
      }
    })

    return () => {
      socket?.off('leave-from-room')
    }
  }, [])

  // –û–±—Ä–∞–±–æ—Ç–∫–∞ –∏–∑–º–µ–Ω–µ–Ω–∏–π state –º–∏–∫—Ä–æ—Ñ–æ–Ω–∞ –∏ –∫–∞–º–µ—Ä—ã

  const updateMediaStream = useCallback(
    async (cameraOn: boolean) => {
      try {
        console.log('üîÑ Updating media stream, camera:', cameraOn)

        // –°–æ–∑–¥–∞–µ–º –Ω–æ–≤—ã–π —Å—Ç—Ä–∏–º
        const newStream = await getMediaStream(cameraOn)
        if (!newStream) {
          throw new Error('Failed to get media stream')
        }

        // –û—Å—Ç–∞–Ω–∞–≤–ª–∏–≤–∞–µ–º —Å—Ç–∞—Ä—ã–π —Å—Ç—Ä–∏–º –µ—Å–ª–∏ –µ—Å—Ç—å
        if (localStream) {
          localStream.getTracks().forEach((track) => {
            if (track.readyState === 'live') {
              track.stop()
            }
          })
        }

        setLocalStream(newStream)

        console.log('‚úÖ Media stream updated:', {
          videoTracks: newStream.getVideoTracks().length,
          audioTracks: newStream.getAudioTracks().length,
          streamId: newStream.id,
        })

        return newStream
      } catch (error) {
        console.error('‚ùå Error updating media stream:', error)
        return null
      }
    },
    [localStream, getMediaStream]
  )

  // –û–±—Ä–∞–±–æ—Ç–∫–∞ –∏–∑–º–µ–Ω–µ–Ω–∏–π state –º–∏–∫—Ä–æ—Ñ–æ–Ω–∞ –∏ –∫–∞–º–µ—Ä—ã

  useEffect(() => {
    const updateMedia = async () => {
      if (!sendTransport || !isConnected || isUpdatingMediaRef.current) {
        return
      }

      isUpdatingMediaRef.current = true

      try {
        console.log('üîÑ Updating media stream, camera:', isCameraOn)

        // –í—Å–µ–≥–¥–∞ —Å–æ–∑–¥–∞–µ–º –Ω–æ–≤—ã–π —Å—Ç—Ä–∏–º –ø—Ä–∏ –∏–∑–º–µ–Ω–µ–Ω–∏–∏ —Å–æ—Å—Ç–æ—è–Ω–∏—è –∫–∞–º–µ—Ä—ã
        const newStream = await getMediaStream(isCameraOn)
        if (!newStream) {
          throw new Error('Failed to get media stream')
        }

        // –û—Å—Ç–∞–Ω–∞–≤–ª–∏–≤–∞–µ–º —Å—Ç–∞—Ä—ã–π —Å—Ç—Ä–∏–º
        if (localStream) {
          localStream.getTracks().forEach((track) => {
            if (track.readyState === 'live') {
              track.stop()
            }
          })
        }

        // –£—Å—Ç–∞–Ω–∞–≤–ª–∏–≤–∞–µ–º –Ω–æ–≤—ã–π —Å—Ç—Ä–∏–º - —ç—Ç–æ –≤—ã–∑–æ–≤–µ—Ç –ø–µ—Ä–µ—Å–æ–∑–¥–∞–Ω–∏–µ –∞—É–¥–∏–æ–ø—Ä–æ–¥—é—Å–µ—Ä–∞ –≤ —Ö—É–∫–µ
        setLocalStream(newStream)

        // –õ–æ–≥–∏–∫–∞ –¥–ª—è –≤–∏–¥–µ–æ
        if (isCameraOn && !producersRef.current.video) {
          console.log('üìπ Creating video producer...')
          const videoTracks = newStream.getVideoTracks()
          if (videoTracks.length > 0) {
            await createProducer(sendTransport, newStream, 'video')
            console.log('‚úÖ Video producer created')
          }
        } else if (!isCameraOn && producersRef.current.video) {
          console.log('üìπ Closing video producer...')
          if (socket) {
            socket.emit('producer-close', {
              producerId: producersRef.current.video.id,
              roomId,
            })
          }
          producersRef.current.video.close()
          producersRef.current.video = null
          setProducers((prev) => ({ ...prev, video: undefined }))
        }

        console.log('‚úÖ Media update completed')
      } catch (error) {
        console.error('‚ùå Error in updateMedia:', error)
      } finally {
        isUpdatingMediaRef.current = false
      }
    }

    // –ò—Å–ø–æ–ª—å–∑—É–µ–º setTimeout –¥–ª—è –¥–µ–±–∞—É–Ω—Å–∞
    const timeoutId = setTimeout(() => {
      updateMedia()
    }, 300)

    return () => clearTimeout(timeoutId)
  }, [
    isCameraOn,
    sendTransport,
    isConnected,
    createProducer,
    socket,
    roomId,
    getMediaStream,
  ])
  // –§—É–∫–Ω—Ü–∏—è –ø–æ–ª–Ω–æ–≥–æ –ø–µ—Ä–µ–ø–æ–¥–∫–ª—é—á–µ–Ω–∏—è
  const handleFullRetry = useCallback(async () => {
    // –æ–±—ä—è–≤–ª—è–µ–º —Ñ—É–Ω–∫—Ü–∏—é
    console.log('Initiating full retry...')
    isInitializedRef.current = false // –≤—ã—Å—Ç–∞–≤–ª—è–µ–º, —á—Ç–æ –∫–æ–º–Ω–∞—Ç–∞ –Ω–µ –∏–Ω–∏—Ü–∏–∞–ª–∏–∑–∏—Ä–æ–≤–∞–Ω–∞

    // –æ—á–∏—â–∞–µ–º —Ç–∞–π–º–µ—Ä –ø–µ—Ä–µ–ø–æ–¥–∫–ª—é—á–µ–Ω–∏—è, –µ—Å–ª–∏ –æ–Ω —Å–µ–π—á–∞—Å –∞–∫—Ç–∏–≤–µ–Ω
    if (reconnectTimeoutRef.current) {
      clearTimeout(reconnectTimeoutRef.current)
      reconnectTimeoutRef.current = null
    }

    // –∑–∞–∫—Ä—ã–≤–∞–µ–º –∏ –æ—á–∏—â–∞–µ–º —Ç—Ä–∞–Ω—Å–ø–æ—Ä—Ä—Ç—ã
    closeTransports()
    setSendTransport(null)
    recvTransportRef.current = null

    if (localStream) {
      // –∑–∞–∫—Ä—ã–≤–∞–µ–º –≤—Å–µ —Ç—Ä–µ–∫–∏ –ª–æ–∫–∞–ª—å–Ω–æ–≥–æ —Å—Ç—Ä–∏–º–∞
      localStream.getTracks().forEach((track) => track.stop())
      setLocalStream(null)
    }

    // –∑–∞–∫—Ä—ã–≤–∞–µ–º –≤—Å–µ –ø—Ä–æ–¥—é—Å–µ—Ä—ã
    Object.values(producersRef.current).forEach((producer) => {
      if (producer && typeof producer.close === 'function') {
        producer.close()
      }
    })
    producersRef.current = {}
    setProducers({})

    // –∑–∞–∫—Ä—ã–≤–∞–µ–º –≤—Å–µ –∫–æ–Ω—Å—é–º–µ—Ä—ã
    Object.values(consumers).forEach((consumerData) => {
      if (
        consumerData.consumer &&
        typeof consumerData.consumer.close === 'function'
      ) {
        consumerData.consumer.close()
      }
      if (consumerData.consumer?.audioElement) {
        consumerData.consumer.audioElement.remove() // —Ç–∞–∫–∂–µ –ø—Ä–∏ –∑–∞–∫—Ä—ã—Ç–∏–∏ –∫–æ–Ω—Å—é–º–µ—Ä–æ–≤ —É–¥–∞–ª—è–µ–º –∞—É–¥–∏–æ —ç–ª–µ–º–µ–Ω—Ç—ã, –ø—Ä–∏–≤—è–∑–∞–Ω–Ω—ã–µ –∫ –Ω–∏–º
      }
    })
    setConsumers({})

    setReconnectAttempts(0) // –æ–±–Ω—É–ª—è–µ–º –∫–æ–ª–∏—á–µ—Å—Ç–≤–æ –ø–æ–ø—ã—Ç–æ–∫ –ø–µ—Ä–µ–ø–æ–¥–∫–ª—é—á–µ–Ω–∏—è
    setIsConnected(false) // –≤—ã—Å—Ç–∞–≤–ª—è–µ–º, —á—Ç–æ –º—ã –Ω–µ –ø–æ–¥–∫–ª—é—á–µ–Ω—ã

    fullRetry() // –≤—ã–∑—ã–≤–∞–µ–º —Ñ—É–Ω–∫—Ü–∏—é –ø–æ–ª–Ω–æ–π –ø–æ–≤—Ç–æ—Ä–Ω–æ–π –ø–æ–ø—ã—Ç–∫–∏ –ø–æ–¥–∫–ª—é—á–µ–Ω–∏—è (50 —Å—Ç—Ä–æ–∫–∞)
  }, [sendTransport, localStream, closeTransports, fullRetry, consumers]) // –∑–∞–≤–∏—Å–∏–º–æ—Å—Ç–∏

  useEffect(() => {
    // –ø—Ä–æ–≤–µ—Ä—è–µ–º, –µ—Å—Ç—å –ª–∏ –≤–∏–¥–µ–æ —É –¥—Ä—É–≥–∏—Ö –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª–µ–π
    const hasOtherUsersVideo = Object.values(consumers).some(
      (consumerData) => consumerData.kind === 'video'
    )

    // —É—Å—Ç–∞–Ω–∞–≤–ª–∏–≤–∞–µ–º isVideoCall –µ—Å–ª–∏ –µ—Å—Ç—å –Ω–∞—à–∞ –∫–∞–º–µ—Ä–∞ –∏–ª–∏ –≤–∏–¥–µ–æ —É –¥—Ä—É–≥–∏—Ö
    setIsVideoCall(isCameraOn || hasOtherUsersVideo)
  }, [isCameraOn, consumers])

  // –û—Ç—Ä–∏—Å–æ–≤–∫–∞ –¥—Ä—É–≥–∏—Ö –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª–µ–π
  const renderVideoElements = () => {
    return Object.entries(consumers)
      .map(([producerId, consumerData]) => {
        if (!consumerData.consumer || !consumerData.consumer.track) {
          return null
        }

        const userHasVideo = Object.values(consumers).some(
          (el) => el.userId === consumerData.userId && el.kind === 'video'
        )

        const isVideo = consumerData.kind === 'video'
        const isAudio = consumerData.kind === 'audio'
        const isMuted = mutedUsers.has(consumerData.userId)

        // –î–ª—è –∞—É–¥–∏–æ - —Å–æ–∑–¥–∞–µ–º —Å–∫—Ä—ã—Ç—ã–π —ç–ª–µ–º–µ–Ω—Ç
        if (isAudio && !userHasVideo) {
          return (
            <div key={producerId}>
              <audio
                ref={(audioElement) => {
                  if (audioElement && consumerData.consumer.track) {
                    audioElement.srcObject = new MediaStream([
                      consumerData.consumer.track,
                    ])
                    audioElement.play().catch((error) => {
                      if (error.name !== 'AbortError') {
                        console.error('Error playing audio:', error)
                      }
                    })
                  }
                }}
                autoPlay
                playsInline
                muted={false}
                style={{
                  display: 'none',
                }}
              />
              {isVideoCall ? (
                <div className={cl.boxAvatarContainer}>
                  <img
                    src={consumerData.avatar || '/default-avatar.png'}
                    alt={consumerData.username || 'user'}
                    className={cl.boxAvatarBackground}
                  />
                  <img
                    src={consumerData.avatar || '/default-avatar.png'}
                    alt={consumerData.username || 'user'}
                    className={cl.boxAvatarImage}
                  />
                  <AnimatePresence>
                    {isMuted && (
                      <motion.div
                        initial={{ scale: 0 }}
                        animate={{ scale: 1, opacity: 1 }}
                        exit={{ scale: 0, opacity: 0.5 }}
                        transition={{ duration: 0.25 }}
                        className={cl.mutedIconWrapperBox}
                      >
                        <img
                          className={cl.mutedIcon}
                          src={mutedIcon}
                          alt="muted"
                        />
                      </motion.div>
                    )}
                  </AnimatePresence>
                </div>
              ) : (
                <div>
                  <img
                    src={consumerData.avatar || '/default-avatar.png'}
                    alt={consumerData.username || 'User'}
                    className={cl.avatar}
                  />
                  <AnimatePresence>
                    {isMuted && (
                      <motion.div
                        initial={{ scale: 0 }}
                        animate={{ scale: 1, opacity: 1 }}
                        exit={{ scale: 0, opacity: 0.5 }}
                        transition={{ duration: 0.25 }}
                        className={cl.mutedIconWrapper}
                      >
                        <img
                          className={cl.mutedIcon}
                          src={mutedIcon}
                          alt="muted"
                        />
                      </motion.div>
                    )}
                  </AnimatePresence>
                </div>
              )}
            </div>
          )
        }

        // –î–ª—è –≤–∏–¥–µ–æ - –æ—Ç–æ–±—Ä–∞–∂–∞–µ–º –≤–∏–¥–µ–æ —ç–ª–µ–º–µ–Ω—Ç
        if (isVideo) {
          return (
            <div key={producerId}>
              <video
                ref={(videoElement) => {
                  if (videoElement && consumerData.consumer.track) {
                    videoElement.srcObject = new MediaStream([
                      consumerData.consumer.track,
                    ])
                    videoElement.play().catch((error) => {
                      if (error.name !== 'AbortError') {
                        console.error('Error playing video:', error)
                      }
                    })
                  }
                }}
                autoPlay
                playsInline
                muted={consumerData.userId === currentUserId}
                className={cl.camera}
              />
              <AnimatePresence>
                {isMuted && (
                  <motion.div
                    initial={{ scale: 0 }}
                    animate={{ scale: 1, opacity: 1 }}
                    exit={{ scale: 0, opacity: 0.5 }}
                    transition={{ duration: 0.25 }}
                    className={cl.mutedIconWrapperCam}
                  >
                    <img
                      className={cl.mutedIconCam}
                      src={mutedIcon}
                      alt="muted"
                    />
                  </motion.div>
                )}
              </AnimatePresence>
            </div>
          )
        }

        return null
      })
      .filter(Boolean)
  }

  // –û—Ç—Ä–∏—Å–æ–≤–∫–∞ –ª–æ–∫–∞–ª—å–Ω–æ–≥–æ –≤–∏–¥–µ–æ
  // Room.tsx - –≤ renderLocalVideo –∏ renderVideoElements
  const renderLocalVideo = () => {
    if (!localStream) return null
    const currentUserAvatar = localStorage.getItem('avatar')
    const isMuted = mutedUsers.has(currentUserId || 'userid')

    if (!isCameraOn) {
      return (
        <div>
          {isVideoCall ? (
            <div className={cl.avatarContainer}>
              <AnimatePresence>
                {isTransmitting && (
                  <motion.div
                    initial={{ opacity: 0 }}
                    animate={{ opacity: 1 }}
                    exit={{ opacity: 0 }}
                    transition={{ duration: 0.2 }}
                  >
                    <div className={cl.boxWave1} />
                    <div className={cl.boxWave2} />
                    <div className={cl.boxWave3} />
                    <div className={cl.boxWave4} />
                  </motion.div>
                )}
              </AnimatePresence>
              <div
                className={
                  isTransmitting
                    ? cl.boxAvatarContainerActive
                    : cl.boxAvatarContainer
                }
              >
                <img
                  src={currentUserAvatar || '/default-avatar.png'}
                  alt={'you'}
                  className={cl.boxAvatarBackground}
                />
                <img
                  src={currentUserAvatar || '/default-avatar.png'}
                  alt={'you'}
                  className={
                    isTransmitting
                      ? cl.boxAvatarImageActive
                      : isMicroMuted
                      ? cl.boxAvatarImageMuted
                      : cl.boxAvatarImage
                  }
                />
                <AnimatePresence>
                  {isMuted && (
                    <motion.div
                      initial={{ scale: 0 }}
                      animate={{ scale: 1, opacity: 1 }}
                      exit={{ scale: 0, opacity: 0.5 }}
                      transition={{ duration: 0.25 }}
                      className={cl.mutedIconWrapperBox}
                    >
                      <img
                        className={cl.mutedIcon}
                        src={mutedIcon}
                        alt="muted"
                      />
                    </motion.div>
                  )}
                </AnimatePresence>
              </div>
            </div>
          ) : (
            <div>
              <div className={cl.avatarContainer}>
                <AnimatePresence>
                  {isTransmitting && (
                    <motion.div
                      initial={{ opacity: 0 }}
                      animate={{ opacity: 1 }}
                      exit={{ opacity: 0 }}
                      transition={{ duration: 0.2 }}
                    >
                      <div className={cl.wave1} />
                      <div className={cl.wave2} />
                      <div className={cl.wave3} />
                      <div className={cl.wave4} />
                    </motion.div>
                  )}
                </AnimatePresence>
                <img
                  src={currentUserAvatar || '/default-avatar.png'}
                  alt={'you'}
                  className={isTransmitting ? cl.avatarActive : cl.avatar}
                />
              </div>
              <AnimatePresence>
                {isMuted && (
                  <motion.div
                    initial={{ scale: 0 }}
                    animate={{ scale: 1, opacity: 1 }}
                    exit={{ scale: 0, opacity: 0.5 }}
                    transition={{ duration: 0.25 }}
                    className={cl.mutedIconWrapper}
                  >
                    <img className={cl.mutedIcon} src={mutedIcon} alt="muted" />
                  </motion.div>
                )}
              </AnimatePresence>
            </div>
          )}
        </div>
      )
    } else {
      return (
        <div>
          <div className={cl.avatarContainer}>
            <AnimatePresence>
              {isTransmitting && (
                <motion.div
                  initial={{ opacity: 0 }}
                  animate={{ opacity: 1 }}
                  exit={{ opacity: 0 }}
                  transition={{ duration: 0.2 }}
                >
                  <div className={cl.boxWave1} />
                  <div className={cl.boxWave2} />
                  <div className={cl.boxWave3} />
                  <div className={cl.boxWave4} />
                </motion.div>
              )}
            </AnimatePresence>
            <video
              ref={(videoElement) => {
                if (videoElement && localStream) {
                  videoElement.srcObject = localStream
                  videoElement.play().catch((error) => {
                    if (error.name !== 'AbortError') {
                      console.error('Error playing local video:', error)
                    }
                  })
                }
              }}
              autoPlay
              playsInline
              muted={true}
              className={isTransmitting ? cl.cameraActive : cl.camera}
              onError={(e) => console.error('Local video error:', e)}
            />
          </div>
          <AnimatePresence>
            {isMuted && (
              <motion.div
                initial={{ scale: 0 }}
                animate={{ scale: 1, opacity: 1 }}
                exit={{ scale: 0, opacity: 0.5 }}
                transition={{ duration: 0.25 }}
                className={cl.mutedIconWrapperCam}
              >
                <img className={cl.mutedIconCam} src={mutedIcon} alt="muted" />
              </motion.div>
            )}
          </AnimatePresence>
        </div>
      )
    }
  }
  // –û—Ç—Ä–∏—Å–æ–≤–∫–∞ –≤—Å–µ–≥–æ –∫–æ–º–ø–æ–Ω–µ–Ω—Ç–∞
  return (
    <div style={{ padding: '20px', fontFamily: 'Arial, sans-serif' }}>
      <h1>Room: {roomId}</h1>

      <div
        style={{
          padding: '10px',
          backgroundColor: isConnected ? '#4CAF50' : '#f44336',
          color: 'white',
          borderRadius: '5px',
          marginBottom: '20px',
        }}
      >
        Status: {isConnected ? 'Connected' : 'Disconnected'}
        {error && (
          <div style={{ marginTop: '10px', fontSize: '14px' }}>
            Error: {error}
            <button
              onClick={handleFullRetry}
              style={{ marginLeft: '10px', padding: '5px 10px' }}
            >
              Full Retry
            </button>
          </div>
        )}
        {isLoading && (
          <div style={{ marginTop: '10px', fontSize: '14px' }}>Loading...</div>
        )}
        {reconnectAttempts > 0 && (
          <div style={{ marginTop: '10px', fontSize: '14px' }}>
            Reconnect attempts: {reconnectAttempts}
          </div>
        )}
      </div>

      <div style={{ marginBottom: '30px' }}>
        <button
          onClick={() => setIsMicroMuted(!isMicroMuted)}
          style={{
            marginRight: '15px',
            padding: '10px 20px',
            backgroundColor: isMicroMuted ? '#f44336' : '#4CAF50',
            color: 'white',
            border: 'none',
            borderRadius: '5px',
            cursor: 'pointer',
          }}
        >
          {isMicroMuted ? ' Unmute' : ' Mute'}
        </button>

        <button
          onClick={() => setIsCameraOn(!isCameraOn)}
          style={{
            padding: '10px 20px',
            backgroundColor: isCameraOn ? '#4CAF50' : '#f44336',
            color: 'white',
            border: 'none',
            borderRadius: '5px',
            cursor: 'pointer',
          }}
        >
          {isCameraOn ? ' Stop Camera' : ' Start Camera'}
        </button>

        <button
          onClick={handleFullRetry}
          style={{
            marginLeft: '15px',
            padding: '10px 20px',
            backgroundColor: '#007bff',
            color: 'white',
            border: 'none',
            borderRadius: '5px',
            cursor: 'pointer',
          }}
        >
          Reconnect
        </button>
        <button
          onClick={leaveRoom}
          style={{
            marginLeft: '15px',
            padding: '10px 20px',
            backgroundColor: '#ff4444',
            color: 'white',
            border: 'none',
            borderRadius: '5px',
            cursor: 'pointer',
          }}
        >
          Leave Room
        </button>
      </div>

      <div>
        <h3>Participants:</h3>
        <div
          style={{
            display: 'flex',
            flexWrap: 'wrap',
            width: '90vw',
            gap: '1vh',
          }}
        >
          {renderLocalVideo()}
          {renderVideoElements()}
        </div>
      </div>

      <div
        style={{
          marginTop: '30px',
          padding: '15px',
          backgroundColor: '#1f1f1fff',
          borderRadius: '5px',
        }}
      >
        <h4>Connection Info:</h4>
        <p>Device Initialized: {isDeviceInitialized ? 'yes' : 'no'}</p>
        <p>Send Transport Ready: {sendTransport ? 'yes' : 'no'}</p>
        <p>Recv Transport Ready: {recvTransportRef.current ? 'yes' : 'no'}</p>
        <p>Local Stream: {localStream ? 'yes' : 'no'}</p>
        <p>Audio Producer: {producers.audio ? 'yes' : 'no'}</p>
        <p>Video Producer: {producers.video ? 'yes' : 'no'}</p>
        <p>Consumers: {Object.keys(consumers).length}</p>
        <p>User ID: {userIdRef.current}</p>
        <p>Reconnect Attempts: {reconnectAttempts}</p>
        <p>MediaSoup Attempts: {mediaSoupAttempts}</p>
        {error && <p style={{ color: 'red' }}>Error: {error}</p>}
      </div>
    </div>
  )
}
